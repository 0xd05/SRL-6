(*
Bank
====

The Bank include contains Bank finders, and all banking routines.

*)

{ const Bnk Constants;
  Description: Constants representing the different types of Banks }

const
  Bank_LB = 1;   //'lb';   (Lumbridge Bank)
  Bank_FE = 2;   //'feb';  (Falador East Bank)
  Bank_FW = 3;   //'fwb';  (Falador West Bank)
  Bank_VE = 4;   //'veb';  (Varrock East Bank)
  Bank_VW = 5;   //'vwb';  (Varrock West Bank)
  Bank_GE = 6;   //'geb';  (Varrock GE Bank)
  Bank_DR = 7;   //'db' ;  (Draynor Bank)
  Bank_AK = 8;   //'akb';  (Al-Kharid Bank)
  Bank_EV = 9;   //'eb' ;  (Edgeville Bank)
  Bank_CT = 10;  //'ctb';  (Catherby bank)
  Bank_CM = 11;  //'clt';  (Camelot bank)
  Bank_NA = 12;  //'nab';  (North Ardougne bank)
  Bank_SA = 13;  //'sab';  (South Ardougne bank)
  Bank_YN = 14;  //'ynb';  (Yanille bank)
  Bank_NG = 15;  //'ngb';  (North gnome bank)
  Bank_SG = 16;  //'sgb';  (South gnome bank)
  Bank_WG = 17;  //'wgb';  (Warrior guild bank)
  Bank_FG = 18;  //'fgb';  (Fishing guild bank)

(*
InPin
~~~~~

.. code-block:: pascal

    function InPin(Pin: String): Boolean;

Enters bank pin. Will try 3 times, returns true if bank is opened.

.. note::

    by ZephyrsFury and Nava2

Example:

.. code-block:: pascal

*)


function InPin(Pin: string): Boolean;
var
  TMouseSpeed, iNumber, Tx, Ty, Counter, colorCount, i: Integer;
  Boxes: array of TBox;
  OnBox: Boolean;
begin
  Result := False;
  if (not(PinScreen)) then Exit;
  if (GetNumbers(Pin) <> Pin) then
  begin
    srl_Warn('InPin', '''' + Pin + ''' is not a valid Pin', warn_AllVersions);
    Exit;
  end;
  if (Length(Pin) <> 4) then
  begin
    srl_Warn('InPin', 'Pin must be 4 digits long', warn_AllVersions);
    Exit;
  end;
  Boxes := [IntToBox(37, 107, 100, 170), IntToBox(131, 107, 194, 170),
            IntToBox(225, 107, 288, 170), IntToBox(309, 107, 372, 170),
            IntToBox(37, 179, 100, 242), IntToBox(131, 179, 194, 242),
            IntToBox(225, 179, 288, 242), IntToBox(37, 251, 100, 314),
            IntToBox(131, 251, 194, 314), IntToBox(225, 251, 288, 314)];
  TMouseSpeed := MouseSpeed;
  MouseSpeed := 25;
  Counter := 0;
  repeat
    if (PinScreen) then
    begin
      // Counts the "Now click the NUM_X digit.". This is used later on.
      ColorCount := CountColorTolerance(clWhite, 150, 80, 380, 100, 10);

      for iNumber := 1 to Length(Pin) do
      begin
        if OnBox then
        begin
          repeat
            Tx := RandomRange(MBX1, MBX2);
            Ty := RandomRange(MBY1, MBY2);
            for i := 0 to 9 do
            begin
              if IntInBox(Tx, ty, Boxes[i]) then
              begin
                OnBox := True;
                Break;
              end;
              OnBox := False;
            end;
          until (not(OnBox));
          MMouse(Tx, Ty, 0, 0);
          Wait(500 + Random(500));
        end;

        if (FindText(Tx, Ty, Pin[iNumber], UpChars, 30, 100, 383, 319)) then
        Begin
          for i := 0 to 9 do
          begin
            OnBox := False;
            if IntInBox(Tx, Ty, Boxes[i]) then
            with Boxes[i] do
            begin
              OnBox := True;
              MouseBox(x1, y1, x2, y2, 1);
              Break;
            end;
          end;
          Wait(1000 + Random(500));
        End;
      end;
    end;
    Wait(1000 + Random(500));
    while (CountColorTolerance(clWhite, 150, 80, 380, 100, 10) = ColorCount) do
    begin
      Wait(500);
      if (BankScreen) then
      begin
        Result := True;
        MouseSpeed := TMouseSpeed;
        Exit;
      end;
    end;
    ClickContinue(True, True);
    while (not(FindColor(Tx, Ty, 0, 7, 460, 69, 474))) do
    begin
      if (not(LoggedIn)) then
      begin
        MouseSpeed := TMouseSpeed;
        Exit;
      end;
      Wait(1000 + Random(500));
    end;
    Inc(Counter);
  until(Counter > 2);
end;

(*
MSTPointToBankPoint
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function MSTPointToBankPoint(P: TPoint): TPoint;

Converts a point on the Mainscreen to the point in the Bank.

First Row and Col are (0,0).
.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)

function MSTPointToBankPoint(MSP: TPoint): TPoint;
begin
  Result.X := (MSP.X - 38) div 44;
  Result.Y := (MSP.Y - 90) div 45;
end;

 (*
BankPointToBankIndex
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function BankPointToBankIndex(P: TPoint): Integer;

Description: Converts a Bank Point (Row,Col) to Bank Index (spot in bank).
(0, 0) = 1

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)


function BankPointToBankIndex(P: TPoint): Integer;
begin
  Result := P.Y * 10 + P.X + 1;
end;

(*
BankIndexToBankPoint
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function BankIndexToBankPoint(ind: Integer): TPoint;

Converts the Bank Index (spot in bank) to a Bank Point (Row,Col).
1 = (0, 0)

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)

function BankIndexToBankPoint(Index: Integer): TPoint;
begin
  Index := Index - 1;
  Result := Point((Index mod 10), Floor(Index div 10));
end;

(*
BankIndexToMSPoint
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function BankIndexToMSPoint(Index: Integer): TPoint;

Converts the Bank Index (spot in bank) to a Mainscreen TPoint of
the Index. (Top Left)

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)

function BankIndexToMSPoint(Index: Integer): TPoint;
begin
  Index := Index - 1;
  Result := Point(38 + (Index mod 10) * 44, 90 + Floor(Index div 10) * 45);
end;

(*
BankIndexToMSBox
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function BankIndexToMSBox(ind:Integer): TBox;

Converts the Bank Index (spot in bank) to a Mainscreen TBox of
the Index.
.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)

function BankIndexToMSBox(Index: Integer): TBox;
var
   P: TPoint;
begin
  P := BankIndexToMSPoint(Index);
  Result.X1 := P.X;
  Result.Y1 := P.Y;
  Result.X2 := Result.X1 + 31;
  Result.Y2 := Result.Y1 + 32;
end;

(*
DepositItemBox
~~~~~~~~~~~~~~

.. code-block:: pascal

    function DepositItemBox(Item: Integer): TBox;

Returns a TBox surround Item (1 to 28) in the Deposit Box screen.

.. note::

    by ZephyrsFury

Example:

.. code-block:: pascal

*)


function DepositItemBox(Item: Integer): TBox;
begin
  Result.X1 := 97 + (Item - 1) mod 7 * 48;
  Result.Y1 := 60 + (Item - 1) div 7 * 50;
  Result.X2 := Result.X1 + 48;
  Result.Y2 := Result.Y1 + 50;
end;

(*
FixBank
~~~~~~~

.. code-block:: pascal

    procedure FixBank;

Scrolls the bank screen up.

.. note::

    by lordsaturn, Nava2, IceFire908 & Bixby Sayz

Example:

.. code-block:: pascal

*)

procedure FixBank;
var
  Timer   : Integer;
begin
  if (SimilarColors(GetColor(481, 110), 723981, 20)) and (BankScreen) and
       (not (SimilarColors(GetColor(489, 101), 1316634, 5))) then
        begin
          Timer := GetTimeRunning + 5000;
          MouseBox(482, 101, 488, 111, 1);
          while ((not (SimilarColors(GetColor(489, 101), 1316634, 5))) and (GetTimeRunning < Timer)) do
            Wait(50 + Random(50));
          Wait(RandomRange(100, 200));
        end;
end;

(*
FixBankTab
~~~~~~~~~~

.. code-block:: pascal

    function FixBankTab: Boolean;

Fixes the BankTab to 'View All'

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)

function FixBankTab: Boolean;
var
   activeTPA, notactiveTPA: TPointArray;
   T: Integer;
begin
  Result := False;
  FindColorsTolerance(activeTPA, 2896954, 25, 45, 70, 80, 5);
  FindColorsTolerance(notactiveTPA, 2437688, 25, 45, 70, 80, 5);

  if Length(activeTPA) > Length(notactiveTPA) then
  begin
    Result := True;
    Exit;
  end;

  Mouse(40, 60, 10, 10, True);
  T := GetSystemTime;
  while Length(activeTPA) <= Length(notactiveTPA) do
  begin
    FindColorsTolerance(activeTPA, 2896954, 25, 45, 70, 80, 5);
    FindColorsTolerance(notactiveTPA, 2437688, 25, 45, 70, 80, 5);
    Wait(500);
    if ((GetSystemTime - T) div 1500) mod 2 = 0 then
      Mouse(40, 60, 10, 10, True);
    if GetSystemTime - T > 10000 then
      Exit;
  end;
end;

(*
CurrentBankTab
~~~~~~~~~~~~~~

.. code-block:: pascal

    function CurrentBankTab: Integer;

Returns Current Bank Tab selected

.. note::

    by Narcle

Example:

.. code-block:: pascal

*)

function CurrentBankTab: Integer;
begin
  Result := -1;
  if not BankScreen then
    Exit;
  for Result := 1 to 9 do
    if GetColor(40 + 48 * (Result - 1), 83) = 2896954 then
      Exit;
  Result := 0;
end;

(*
ExistsBankTab
~~~~~~~~~~~~~

.. code-block:: pascal

    function ExistsBankTab(T: Integer): Boolean;

Returns true if Bank Tab Exists

.. note::

    by Narcle

Example:

.. code-block:: pascal

*)

function ExistsBankTab(T: Integer): Boolean;
var
  x, y: integer;
begin
  Result := False;
  if not BankScreen then
  begin
    srl_Warn('ExistsBankTab', 'Bank not open.', warn_AllVersions);
    Exit;
  end;
  if (not(InRange(T, 1, 9))) then
  begin
    srl_Warn('ExistsBankTab', 'Bank Tab: ' + IntToStr(T) + ' is not possible (1..9) only.', warn_AllVersions);
    Exit;
  end;

  Result := (T = 1) or FindColor(x, y, srl_outline_black, 27+(T-1)*48, 51, 70+(T-1)*48, 81);
end;

(*
BankTab
~~~~~~~

.. code-block:: pascal

    function BankTab(T: Integer): Boolean;

If Bank Tab is there will switch to it.

.. note::

    by Narcle

Example:

.. code-block:: pascal

*)

function BankTab(T: Integer): Boolean;
begin
  result := false;
  if not BankScreen then
    Exit;

  if T = CurrentBankTab then
  Begin
    Result := true;
    Exit;
  end;

  if not ExistsBankTab(T) then
    srl_Warn('BankTab', 'Bank Tab '+inttostr(T) +' does not Exist.', warn_AllVersions)
  else
    Mouse(48 * T, 57, 10, 10, true);

  Result := T = CurrentBankTab;
end;

(*
SearchBank
~~~~~~~~~~

.. code-block:: pascal

    procedure SearchBank(Item: string);

Searches for Item in your bank.

.. note::

    by ZephyrsFury

Example:

.. code-block:: pascal

*)

procedure SearchBank(Item: string);
var
  T, II: Integer;
begin
  if (not(BankScreen)) then Exit;
  for II := 0 to 2 do
  begin
    FixBankTab;
    Mouse(75, 300, 20, 10, True);
    T := GetSystemTime;
    while (BankScreen) and (GetSystemTime - T < 5000) do
    begin
      Wait(500 + Random(500));
      if (FindTextTpa(0, 0, 350, 392, 399, 410, 'search', UpChars, Nothing)) then
      begin
        TypeSend(Item);
        Exit;
      end;
    end;
    Wait(500 + Random(500));
  end;
end;

(*
DepositAll
~~~~~~~~~~

.. code-block:: pascal

    function DepositAll: Boolean;

Deposits all items in your inventory

.. note::

    by ZephyrsFury & Quickmarch

Example:

.. code-block:: pascal

*)
function DepositAll: Boolean;
var
  T, X, Y: Integer;
  BScreen, DScreen: Boolean;
begin
  Result := false;
  BScreen := BankScreen;
  if (not(BScreen)) then
    DScreen := DepositScreen;
  if (BScreen) or (DScreen) then
    if (InvCount > 0) or (FindColor(X, Y, srl_outline_black, 98, 68, 436, 257) and (DSCreen)) then
    begin
      Mouse(390 - 50 * Integer(DScreen), 305 - 30 * Integer(DScreen), 15, 10, True);
      Wait(200 + Random(300));
      T := GetSystemTime;
      while (InvCount > 0) or (FindColor(X, Y, srl_outline_black, 98, 68, 436, 257) and (DSCreen)) and (GetSystemTime - T < 2000) do
        Wait(100);
      Result := (InvEmpty) or (not(FindColor(X, Y, srl_outline_black, 98, 68, 436, 257)) and (DScreen));
    end else begin
      srl_Warn('DepositAll', 'No items to deposit ', warn_AllVersions);
      result := true;
    end;
end;

(*
Deposit
~~~~~~~

.. code-block:: pascal

    Procedure Deposit(SlotFrom, SlotTo: Integer; vType: Variant);

    - Deposits from Slot to ToSlot.
    - vType True = Deposit All.
    - vType False = Deposit one by one.
    - Any integer is deposit with Deposit X. (except for 5 and 10)

.. note::

    by WT-Fakawi/PPLSUQBAWLZ/Stupid3ooo/Town

Example:

.. code-block:: pascal

*)
procedure Deposit(SlotFrom, SlotTo: Integer; vType: Variant);
var
   DepositX, BScreen, DScreen: Boolean;
   All: Variant;
   I, T, x, y: Integer;
   B: TBox;
begin
  BScreen := BankScreen;
  if (not(BScreen)) then
    DScreen := DepositScreen;
  if not (BScreen or DScreen) then
    Exit;
  if vType = 2 then
    srl_Warn('Deposit', '2 now means store per 2, not ''All''', 15);
  DepositX := False;
  case VarType(vType) of
    varInteger: begin
         DepositX := not InIntArray([1, 5, 10], vType);
         if vType = 1 then
           All := False
         else
           All := True;
       end;
    varBoolean: All := vType;
  end;
  if (SlotFrom = 1) and (SlotTo = 28) and (All = true) then
    if DepositAll then
      exit;
  for I := SlotFrom to SlotTo do
  begin
    if (BScreen) then
    begin
      If Not ExistsItem(I) Then
        Continue;
      MouseItem(I, not All);
    end else
    begin
      B := DepositItemBox(I);
      if (not(FindColor(X, Y, srl_outline_black, B.X1, B.Y1, B.X2, B.Y2))) then
        Continue;
      Mouse((B.X1 + B.X2) shr 1, (B.Y1 + B.Y2) shr 1, 0, 0, not All);
    end;
    if DepositX then
    begin
      WaitOptionMulti(['Deposit-X', 'Deposit'], 200);
      T := GetSystemTime;
      while (not FindColor(x, y, 8388608, MCX1, MCY1, MCX2, MCY2)) and (GetSystemTime - T < 3000) do
        Wait(100);
      TypeSend(vType);
    end else if VarType(vType) = varInteger then
      WaitOptionMulti(['Deposit-' + inttostr(vType), 'Deposit'], 200)
    else
      WaitOptionMulti(['Deposit-All', 'Deposit'], 200);
    T := GetSystemTime;
    Wait(RandomRange(200, 300));
    repeat
      if (BScreen) then
        if (not(ExistsItem(I))) then Break;
      if (DScreen) then
        if (not(FindColor(X, Y, srl_outline_black, B.X1, B.Y1, B.X2, B.Y2))) then Break;
      Wait(50);
    until(GetSystemTime - T > 2000);
  end;
end;

(*
WithdrawSlot
~~~~~~~~~~~~

.. code-block:: pascal

    function WithdrawSlot(Col, Row, Amount: Integer; Uptexts: TStringArray): Boolean;

Withdraws Amount at Column/Row.

.. note::

    by Starblaster100, Town, Wizzup? and Narcle, small fixes by r!ch!e & EvilChicken!

Example:

.. code-block:: pascal

*)

function WithdrawSlot(Col, Row, Amount: Integer; Uptexts: TStringArray): Boolean;
var
  BBox: TBox;
  X, Y: Integer;
begin
  Result := False;
  FixBank;

  BBox := BankIndexToMSBox(BankPointToBankIndex(Point(Col, Row)));
  GetMousePos(X, Y);
  if (not PointInBox(Point(X, Y), BBox)) then
    MouseBox(BBox.X1 + 5, BBox.Y1 + 5, BBox.X2 - 5, BBox.Y2 - 5, 3);

  if (Length(Uptexts) > 0) then
    if (not WaitUptextMulti(Uptexts, 500)) then
      Exit;

  ClickMouse2(Amount = 1);
  if (Amount = 1) then
  begin
    Result := True;
    Wait(RandomRange(250, 550));
    Exit;
  end;

  if (Amount = 0) then
    Result := WaitOptionMulti(['Withdraw-All', 'w-A'], 300)
  else
    Result := WaitOptionMulti(['Withdraw-' + IntToStr(Amount), 'w-' + IntToStr(Amount)] , 300);

  if (not (Result)) and (Amount > 0) then
  begin
    MouseBox(BBox.X1 + 5, BBox.Y1 + 5, BBox.X2 - 5, BBox.Y2 - 5, 2);
    if WaitOptionMulti(['Withdraw-X', 'w-X'], 500) then
    begin
       X := GetSystemTime + 10000;
       while (X >= GetSystemTime) and (not (InRange(CountColor(0, 250, 396, 307, 410), 155, 165))) do
         Wait(50);
       Wait(RandomRange(75, 400));
       TypeSend(IntToStr(Amount));
       Result := True;
    end;
  end;
end;

(*
WithdrawItem
~~~~~~~~~~~~

.. code-block:: pascal

    function WithdrawItem(Ident: integer; IdentType: string; var Index: integer; Amount: integer; UpText: String; Tol: TIntegerArray): boolean;

Withdraws an item from the bank by using "Ident" with
    - tol[0] as color tolerance,
    - tol[1] as contour tolerance in case of bmp masks,  or the count of colors for TPA item finding.
    - Valid IdentTypes are all in FindItem.
        - Index: The Bank Index where the item is found, must be a variable.
        - Speeds up future withdraws.
        - Amount: Amount to withdraw from bank.
        - UpText: The UpText which the function checks for.

.. note::

    by Nava2

Example:

.. code-block:: pascal

*)


function WithdrawItem(Ident, IdentType: integer; var Index: integer; Amount: integer; UpText: string; Tol: TIntegerArray): Boolean;
var
  x, y: integer;
  BPoint: TPoint;
  BankBox: TBox;
  Found: Boolean;
  t: TPointArray;
label
  Start;
begin
  Result := False;
  if not BankScreen then Exit;
  FixBank;

  if (Index = 0) then
  begin
    Start:
    for Index := 1 to 50 do
    begin
     // if FindItemEx(x, y, IdentType, Ident, BankIndexToMSBox(Index), Tol) then
      begin
        MMouse(x, y, 4, 4);
        if WaitUpText(UpText, 300) then
        begin
          Writeln('Found Item at Bank Slot ' + IntToStr(Index) + '.');
          Found := True;
          Break;
        end else
          Writeln('Found Incorrect Item, Moving to new Bank Spot.');
      end;
    end;
  end else
  begin
    BankBox := BankIndexToMSBox(Index);
    FindColors(t, srl_outline_black, BankBox.x1, BankBox.y1, BankBox.x2, BankBox.y2);
    BankBox := GetTPABounds(t);
    MouseBox(BankBox.x1, BankBox.y1, BankBox.x2, BankBox.y2, 3);
    if WaitUpText(UpText, 300) then
      Found := true
    else
    begin
      Writeln('Item Moved from Bank Slot ' + IntToStr(Index) + ', checking bank again.');
      GoTo Start;
    end;
  end;
  Wait(RandomRange(200, 350));
  if Found then
  begin
    BPoint := BankIndexToBankPoint(Index);
    //Writeln(IntToStr(BPoint.x) + ', ' + IntToStr(BPoint.y));
    Withdraw(BPoint.x, BPoint.y, Amount);
    Result := True;
  end else
  begin
    Index := 0;
    SRL_Warn('WithdrawItem', 'Could not Find ' + IntToStr(IdentType) + ' in Bank. [Uptext: ' + UpText + ']', Warn_AllVersions);
  end;
end;

(*
Notes
~~~~~

.. code-block:: pascal

    procedure Notes(SwitchOn: Boolean);

Toggles note withdrawal on or off.

.. note::

    by lordsaturn, idea by R1ch

Example:

.. code-block:: pascal

*)

procedure Notes(SwitchOn: Boolean);
begin
  if BankScreen then
    if (GetColor(254, 306) = 5863290) xor SwitchOn then
      Mouse(250, 300, 10, 10, True);
end;

(*
CloseBank
~~~~~~~~~

.. code-block:: pascal

    function CloseBank: Boolean;

Closes the bank window - Tries twice before exiting

.. note::

    by Starblaster100

Example:

.. code-block:: pascal

*)

function CloseBank: Boolean;
var
  i, Timer: Integer;
begin
  Result := False;
  if BankScreen then
  begin
    Timer := GetTimeRunning + 8000;
    repeat
      Mouse(483, 28, 10, 12, mouse_left);
      for i := 0 to 30 do
      begin
        if not BankScreen then
        begin
          Result:= True;
          Break;
        end;
        Wait(100);
      end;
      Wait(Random(100));
    until (GetTimeRunning > Timer) or Result;
  end;
end;

(*
OpenBankFast
~~~~~~~~~~~~

.. code-block:: pascal

    function OpenBankFast(Location: Integer): Boolean;

Description: Opens the bank.
Valid arguments are:

    - Bank_FE (falador east bank)
    - Bank_FW (falador west bank)
    - Bank_VE (varrock east bank)
    - Bank_VW (varrock west bank)
    - Bank_DR (draynor bank)
    - Bank_AK (al-kharid bank)
    - Bank_EV (Edgeville Bank)
    - Bank_CT (catherby bank)
    - Bank_CM (camelot bank)
    - Bank_NA (north ardougne bank)
    - Bank_SA (south ardougne bank)
    - Bank_YN (yanille bank)
    - Bank_NG (north gnome bank)
    - Bank_SG (south gnome bank)
    - Bank_WG (warrior guild bank)
    - Bank_FG (fishing guild bank)

.. note::

    by Wizzup? and Nielsie95 updated by N1ke! updated again by marpis

Example:

.. code-block:: pascal

*)

function OpenBankFast(Location: Integer): Boolean;
var
  bo, i, l, c, z: Integer;
  Info: TVariantArray;
  Booths: TPointArray;
  ABooths: T2DPointArray;
  UpText: TStringArray;
  B: TBox;
begin
  result := false;
  if (not LoggedIn) then
    Exit;
  if BankScreen or PinScreen then
  begin
    Result := True;
    Exit;
  end;
  UpText := ['ooth', 'Bo', 'ot'];

  case Location of  { Sort X     Sort Y      Color     Tol   Hue   Sat  Count  SplitTPA?  W   H }
    Bank_AK:  Info := [MSCX - 50, MSCY,      11196157, 20,   0.20, 1.15, 100,   False,   10, 10]; // Fixed 12/7, #40
    Bank_LB:  Info := [MSCX,      MSCY - 50, 6780805,  10,   0.19, 0.27, 100,   False,   10, 10]; // Fixed 12/7, #40
    Bank_VE:  Info := [MSCX,      MSCY + 50, 3037545,  5,    0.41, 1.32, 100,   False,   10, 10]; // Fixed 12/7, #40
    Bank_VW:  Info := [MSCX,      MSCY,      3037545,  5,    0.41, 1.32, 100,   False,   10, 10]; // Fixed 12/7, #40
    Bank_FE:  Info := [MSCX,      MSCY + 50, 5008519,  10,   0.22, 0.67, 100,   False,   10, 10]; // Fixed 12/7, #40
    Bank_FW:  Info := [MSCX,      MSCY + 50, 5074569,  15,   0.22, 0.67, 50,    False,   10, 10]; // Fixed 12/7, #40
    Bank_DR:  begin
                Uptext := [['ount', 'unte', 'oun', 'unter']];
                Info := [MSCX - 50, MSCY,      5527389,  7,    0.20, 0.20, 10,    False,   5,  10]; // Fixed 12/7, #40
              end;
    Bank_EV:  Info := [MSCX + 20, MSCY,      3561835,  20,   0.32, 0.61, 50,    False,   10, 10]; // Fixed 12/7, #40
    Bank_CT:  Info := [MSCX,      MSCY,      3239049,  8,    0.20, 0.20, 100,   False,   10, 10];
    Bank_CM:  Info := [MSCX,      MSCY,      7636882,  5,    0.20, 0.20, 100,   False,   10, 10];
    Bank_NA:  Info := [MSCX,      MSCY,      4084572,  5,    0.20, 0.20, 100,   False,   10, 10];
    Bank_SA:  Info := [MSCX,      MSCY,      4084572,  5,    0.20, 0.20, 100,   False,   10, 10];
    Bank_YN:  Info := [MSCX,      MSCY,      3239049,  7,    0.20, 0.20, 100,   False,   10, 10];
    Bank_NG:  Info := [MSCX,      MSCY,      3239049,  7,    0.20, 0.20, 100,   False,   10, 10];
    Bank_SG:  Info := [MSCX,      MSCY,      3239049,  7,    0.20, 0.20, 100,   False,   10, 10];
    Bank_WG:  Info := [MSCX,      MSCY,      2578286,  7,    0.20, 0.20, 100,   False,   10, 10];
    Bank_FG:  Info := [MSCX,      MSCY,      2908796,  10,   0.20, 0.20, 100,   False,   10, 10];
    else
    begin
      srl_Warn('OpenBankFast', 'Unknown bank', warn_AllVersions);
      Exit;
    end;
  end;

  MakeCompass('n');
  z := GetToleranceSpeed;
  SetColorToleranceSpeed(2);
  SetToleranceSpeed2Modifiers(Info[4], Info[5]);

  FindColorsSpiralTolerance(Info[0], Info[1], Booths, Info[2], MSX1, MSY1, MSX2, MSY2, Info[3]);
  SetColorToleranceSpeed(z);
  SetToleranceSpeed2Modifiers(0.2, 0.2);

  { Split to ATPA. }
  if Info[7] then
    ABooths := SplitTPA(Booths, 1)
  else
    ABooths := TPAtoATPA(Booths, 10);

  Booths := [];

  { Go through ATPA. }
  l := GetArrayLength(ABooths) -1;
  for i := 0 to l do
  begin
    { Too few pixels. }
    if (Length(ABooths[i]) < Info[6]) then
      Continue;

    { Too small TPA bounds. }
    B := GetTPABounds(ABooths[i]);
    If ((B.X2 - B.X1) < Info[8]) Or ((B.Y2 - B.Y1) < Info[9]) Then
      Continue;

    Inc(bo);
    SetArrayLength(Booths, bo);
    Booths[bo-1] := MiddleTPA(ABooths[i]);

  end;

  SortTPAFrom(Booths, Point(Info[0], Info[1]));

  l := GetArrayLength(Booths) -1;
  for i := 0 to l do
  begin

    MMouse(Booths[i].X, Booths[i].Y, 3, 3);
    if WaitUpTextMulti(UpText, 1000) Then
    begin
      GetMousePos(Booths[i].X, Booths[i].Y);
      Mouse(Booths[i].X, Booths[i].Y, 0, 0, False);
      if WaitOptionMulti(['uic', 'kly', 'ickl', 'uickly'], 2200) then
      begin
        FFLag(0);
        MarkTime(c);
        repeat
          Wait(100);
        until (BankScreen) or (PinScreen) or (TimeFromMark(c) > 10000);
        Wait(Random(300));
        if (HowManyPlayers > 0) then
          if (Players[CurrentPlayer].Pin <> '') then
            InPin(Players[CurrentPlayer].Pin);
        Result := (BankScreen) or (PinScreen);
        if (Result) then Exit;
      end;
    end;
  end;
end;

(*
OpenBankNPC
~~~~~~~~~~~

.. code-block:: pascal

    function OpenBankNPC: Boolean;

Opens the bank by using Banker.

.. note::

    by Home

Example:

.. code-block:: pascal

*)

function OpenBankNPC: Boolean;
var
  bx, by, Speed, ColFace, ColGrey, ColBlue: Integer;
begin
  Result := (LoggedIn) and (BankScreen or PinScreen);
  if (Result) then exit;

  Speed := GetToleranceSpeed;
  SetColorToleranceSpeed(2);
  ColFace := 7774419; // Face Color
  ColGrey := 6381925; // Grey Color [ Clothes ]
  ColBlue := 2429979; // Blue Color [ Clothes ]
  if (FindObjThroughMM(bx, by, 'npc', [ColFace, ColBlue, ColGrey], [5, 5, 5],
    ['anke', 'to B', 'Banker', 'nker'], 2, 2)) then
  begin
    Mouse(bx, by, 0, 0, False);
    WaitOptionMulti(['ank B', 'k Ba'], 500);
    FFlag(0);
    Wait(2000 + Random(500));
    if (Length(Players) > 0) then
      if ((PinScreen) and (Players[CurrentPlayer].Pin <> '')) then
        InPin(Players[CurrentPlayer].Pin);
    Result := (BankScreen) or (PinScreen);
  end;
  SetColorToleranceSpeed(Speed);
end;

(*
OpenBank
~~~~~~~~~~~~

.. code-block:: pascal

    function OpenBank(WhichBank: Integer, ChangeCompass, ChangeAngle: Boolean): Boolean;

Opens the bank if possible.
Valid arguments are:

    - Bank_FE (Falador East Bank)
    - Bank_FW (Falador West Bank)
    - Bank_VE (Varrock East Bank)
    - Bank_VW (Varrock West Bank)
    - Bank_DR (Draynor Bank)
    - Bank_AK (Al-Kharid Bank)
    - Bank_EV (Edgeville Bank)
    - Bank_LB (Lumbridge Bank)
    - Bank_CT (Catherby bank)
    - Bank_CM (Camelot bank)
    - Bank_NA (North Ardougne bank)
    - Bank_SA (South Ardougne bank)
    - Bank_YN (Yanille bank)
    - Bank_NG (North gnome bank)
    - Bank_SG (South gnome bank)
    - Bank_WG (Warrior guild bank)
    - Bank_FG (Fishing guild bank)

.. note::

    by phantombmx/EvilChicken!, idea by NaumanAkhlaQ

Example:

.. code-block:: pascal

*)

function OpenBank(WhichBank: Integer; ChangeCompass, ChangeAngle: Boolean): Boolean;
var
  I: Integer;
begin
  result := false;
  if BankScreen then
  begin
    Result := True;
    Exit;
  end;

  for I := 0 to 3 do
  begin
    case I of
      0: Result := OpenBankFast(WhichBank);
      1: Result := OpenBankGlass(WhichBank, ChangeCompass, ChangeAngle);
      2: Result := OpenBankQuiet(WhichBank);
      3: Result := OpenBankNPC;
    end;

    if Result then
      Exit;
  end;
end;

(*
FindBank
~~~~~~~~

.. code-block:: pascal

    function FindBank(TheBank: Integer): Boolean;

Finds and opens any given bank in the free world.
If the MM DTM is found it will find and open the bank.
Valid arguments are:

    - Bank_FE (Falador East Bank)
    - Bank_FW (Falador West Bank)
    - Bank_VE (Varrock East Bank)
    - Bank_VW (Varrock West Bank)
    - Bank_DR  (Draynor Bank)
    - Bank_AK (Al-Kharid Bank)
    - Bank_CT (Catherby bank)
    - Bank_CM (Camelot bank)
    - Bank_NA (North Ardougne bank)
    - Bank_SA (South Ardougne bank)
    - Bank_YN (Yanille bank)
    - Bank_NG (North gnome bank)
    - Bank_SG (South gnome bank)
    - Bank_FG (Fishing guild bank)

.. note::

    by WT-Fakawi and modified by Ron Updated to P2p by N1ke! Eb added by R1ch

Example:

.. code-block:: pascal

*)

function FindBank(TheBank: Integer): Boolean;
var
  bx, by, TheDTM: Integer;
  WhichAngle: Extended;
begin
  result := false;
  case TheBank of
    Bank_FE: TheDTM := DTMFromString('78DA63AC67626088634001FFFFFD63F80FA41' +
        '9416C2060AC01AA4987C83141D5FCF9C3C4C0055503028CAD44A8' +
        'E924AC0600131E11B5');
    Bank_FW: TheDTM := DTMFromString('78DA636C676260086540038C0CFFC12403C37' +
        'F206004A98986C8304155FCF9C3C4C0055503D6D14C849A6EC26A' +
        '009F5A0EA1');
    Bank_DR: TheDTM := DTMFromString('78DA632C6162608866400181DEDE0CFF81342' +
       '310FF0702C62CA09A4454357FFE30313043D58000584D1C116AC2' +
       'F0AB0100EC370F0C');
    Bank_VE: TheDTM := DTMFromString('78DA63EC61626008624001FFFFFD63F80FA41' +
        '9416C2060EC00AA8982C83141D5FCF9C3C4C0055503028C138850' +
        'D343580D00122211A9');
    Bank_VW: TheDTM := DTMFromString('78DA63EC606260B066C000FF819811440301E' +
        '354A01A3B88381354FECF1F260611A81A1000AB3125428D2E7E35' +
        '0087F80E5E');
    Bank_AK: TheDTM := DTMFromString('78DA636C606260F06140019D9D710CFF81342' +
        '310FF0702C652A01A37881C1354CD9F3F4C0C5C5035200056E345' +
        '841A3FFC6A002A3B0F97');

    Bank_CT: TheDTM := DTMFromString('78DA63CC63626008624001478F1E65F80FA41' +
       '981F83F1030A602D578A0AAF9F387898119AA060418F388505344' +
       '849A32C26A00FE5D12EE');
    Bank_CM: TheDTM := DTMFromString('78DA63CC67626008604001E78E1F67F80FA41' +
       '981F83F10306601D5B8A2AAF9F387898119AA060418CB88505345' +
       '849A3AC26A000B52130B');
    Bank_NA: TheDTM := DTMFromString('78DA63AC61626008654001135A8B19FE03694' +
       '620FE0F048C454035B1A86AFEFC61626086AA0101C66A22D47400' +
       'D5C4E057030045F20FE7');
    Bank_SA: TheDTM := DTMFromString('78DA632C656260086040017DCD850CFF81342' +
       '310FF0702C63AA09A6454357FFE30313043D58000584D180135F5' +
       '40359EF8D500003F560FC7');
    Bank_YN: TheDTM := DTMFromString('78DA632C60626008654001E78E1F67F80FA41' +
       '981F83F10305601D5F8A2AAF9F387898119AA0604182B31CDC1AA' +
       '260ABF1A009CFB108C');
    Bank_NG: TheDTM := DTMFromString('78DA632C66626008654001FFFFFF67F80FA41' +
       '921ECFF8CB94035B1A86AFEFC61626086AA0101C632C26A00AD6D' +
       '0E64');
    Bank_SG: TheDTM := DTMFromString('78DA632C606260086640038C0CFFC12403C37' +
       'F20604C05AA894255F1E70F130333540D5807484D18116AFCF0AB' +
       '01006D100DF4');

    Bank_FG: TheDTM := DTMFromString('78DA632C626260F0654001F5311E0CFF81342' +
       '310FF0702C64CA01A1754357FFE30313043D58000588D27116A02' +
       '8950138A5F0D0041A911BD');
    Bank_EV: TheDTM := DTMFromString('78DA63E4666060E0614001EF2F2832FC07D28' +
       'C40FC1F0818E5800C7154355FBF426846289F51124848A3AAF9F3' +
       '8709558D0490504255F3EF9F20A6395AF8D500008FCC0FE1');
    else
    begin
      srl_Warn('FindBank', 'Invalid bank name', warn_Warning);
      Exit;
    end;
  end;
  if FindDtmRotated(TheDTM, bx, by, MMX1, MMY1, MMX2, MMY2, Radians(-30), Radians(30), 0.05, WhichAngle) then
  begin
    Mouse(bx, by, 0, 0, True);
    FFlag(0);
    Wait(300+Random(400));
    Result := OpenBank(TheBank, False, False);
  end;
  FreeDTM(TheDTM);
end;

(*
OpenDepositBox
~~~~~~~~~~~~~~

.. code-block:: pascal

    function OpenDepositBox : Boolean;

Opens the deposit box.

.. note::

    by Shuttleu

Example:

.. code-block:: pascal

*)

function OpenDepositBox : Boolean;
var
  X, Y, T:integer;
begin
  result := false;
  If(not(LoggedIn)) then exit;
  begin
    if FindObjTPA(x, y, 739167, 10, -1, 30, 30, 200, ['deposit']) then
    begin
      GetMousePos(X, Y);
      Mouse(x, y, 0, 0, True);
      Result := WaitFunc(@DepositScreen, 200, 5000);
    end else
    Writeln('Could not find the deposit box');
  end;
end;
                                                                             
