(*
Interfaces
==========

The interfaces file stores any global interface functions, including TRSInterface
and all its functions.  All interface files should import this file.

*)

{$include_once ../core/debug.simba}
{$include_once ../core/mouse.simba}

{*
Constant: IDs
~~~~~~~~~~~~~

Integer constants that represent the ID's of each global interface.
*}
const
  ID_INTERFACE_TAB_INVENTORY = 0;
  ID_INTERFACE_TAB_LOGOUT    = 1;

{*
Constant: Interface
~~~~~~~~~~~~~~~~~~~

Constants that are consistent over several interfaces.
*}
const
  MIX1 = 0;
  MIX2 = 0;
  MIY1 = 0;
  MIY2 = 0;

{*
Type: TRSInterface
~~~~~~~~~~~~~~~~~~

A record that stores useful information about RS interfaces.
*}
type
  TRSInterface = record
    name: string;
    ID, parentID: integer;
    static: boolean;
    x, y, w, h: integer;
    bounds: TBox;
  end;

(*
TRSInterface.getBounds
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.getBounds(): TBox;

Returns a TBox of the TRSInterface.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    b := mainscreen.getBounds();
*)
function TRSInterface.getBounds(): TBox;
begin
  result := intToBox(x, y, (x + w), (y + h));
end;

(*
TRSInterface.getColors
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.getColors(clearSame: boolean = true): TIntegerArray;

Returns an array of all the colors found in the TRSInterface. Clears duplicate
colors if clearSame is set to true.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    cols := mainscreen.getColors();
*)
function TRSInterface.getColors(clearSame: boolean = true): TIntegerArray;
var
  b: TBox;
begin
  b := self.getBounds();
  result := b.getColors(clearSame);
end;

(*
TRSInterface.findColor
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.findColors(var tpa: TPointArray; col, tol: integer): boolean;

Returns true if a color with a given tolerance is found in the TRSInterface.
    * tpa: The points where the color was found.
    * col: The color to look for.
    * tol: The tolerance on col.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    if (mainscreen.findColor(tpa, clRed, 10)) then
      debug('Found the color red');
*)
function TRSInterface.findColor(var tpa: TPointArray; col, tol: integer): boolean;
begin
  result := findColorsTolerance(tpa, col, self.getBounds(), tol);
end;

(*
TRSInterface.drag
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSInterface.drag(dest: TPoint): boolean;

Drags the TRSInterface to a destination point (dest) if the interface's static
attribute is set to false.

.. note::

    by Coh3n

Example:

.. code-block:: pascal

    squealOfFortune.drag(point(0, 0));
*)
function TRSInterface.drag(dest: TPoint): boolean;
var
  mouseDownPoint, currMousePos, diff, dragTo: TPoint;
begin
  if (self.static = true) then
  begin
    debug('Interface '+self.name+' is static; cannot be dragged');
    exit(false);
  end;

  // point to start the drag
  mouseDownPoint := point(self.x + random(self.w), self.y + random(self.y)); // point to start the drag
  mouse(mouseDownPoint);

  // calculate where to drag to and from
  getMousePos(currMousePos.x, currMousePos.y);
  diff.x := (self.x - dest.x);
  diff.y := (self.y - dest.y);
  dragTo.x := (currMousePos.x - diff.x);
  dragTo.y := (currMousePos.y - diff.y);

  // drag the mouse
  dragMouse(dragTo);
  self.x := dest.x;
  self.y := dest.y;
  result = true;
end;
