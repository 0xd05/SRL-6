(*
flag
=======

The flag include contains all general flag related functions

.. contents::

*)
{$include_once ../core/mouse.simba}
{$include_once ../utilities/type.simba}

(*
getCompassAngleRadians
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getCompassAngleRadians: extended;

Returns the compass angle in radians.

.. note::

    by Narcle & Flight

Example:

.. code-block:: pascal

*)
function getCompassAngleRadians: extended;
var
  tpa: TPointArray;
  t: TPoint;
  b: TBox;
begin
  b := intToBox(524, 5, 562, 43);
  with b do
    findColorsSpiralTolerance(t.x, t.y, tpa, 65536, x1, y1, x2, y2, 0);
  if length(tpa) < 1 then
   exit;
  t := middleTPA(tpa);
  result := arcTan2(-(t.y - 24), t.x - 543) + radians(90);
  result := fixRad(result - pi);
end;

(*
getCompassAngleDegrees
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getCompassAngleDegrees: extended;

Returns the compass angle in degrees.

.. note::

    by Wizzup?

Example:

.. code-block:: pascal

*)
function getCompassAngleDegrees: extended;
begin
  result := degrees(getCompassAngleRadians());
end;


(*
onMinimap
~~~~~~~~~~~~

.. code-block:: pascal

    function onMinimap(p: TPoint): boolean;

Checks wether the specified point is on the minimap.

.. note::

    by Raymond

Example:

.. code-block:: pascal

*)
function onMinimap(p: TPoint): boolean;
begin
  result := 75 >= distance(p.x, p.y, MMCX, MMCY);
end;

(*
findFlag
~~~~~~~~

.. code-block:: pascal

    function findFlag(var p: TPoint): boolean;

Returns true if the flag is found on the minimap.

.. note::

    by Narcle

Example:

.. code-block:: pascal

  if (pindFlag(point)) then
  begin
    writeln('Flag found');
    mouse(p, mouse_Left);
  end;
*)
function findFlag(var p: TPoint): boolean;
begin
  result := false;
  if findBitmapToleranceIn(bmpFlag, p.x, p.y, MMX1, MMY1, MMX2, MMY2, 75) then
  begin
    result := true;
    p.Inc(7,14);
  end;
end;

(*
findFlag2
~~~~~~~~

.. code-block:: pascal

    function findFlag2(var p: TPoint): boolean;

Returns true if the flag is found on the minimap.

.. note::

    by Home

Example:

.. code-block:: pascal

  if (findFlag2(point)) then
  begin
    writeln('Flag found');
    mouse(point.Rand(3), mouse_Left);
  end;
*)
function findFlag2(var p: TPoint): boolean;
var
  kmTarget, iTarget, i, hi, map, w, h, t: integer;
  tpa: TPointArray;
begin
  result := false;
  map := bitmapFromString(MMX2 - MMX1, MMY2 - MMY1, '');
  copyClientToBitmap(map, MMX1, MMY1, MMX2, MMY2);
  kmTarget := getKeyMouseTarget;
  iTarget := getImageTarget;
  setTargetBitmap(map);
  getBitmapSize(map, w, h);
  findColors(tpa, 65536, 0, 0, w - 1, h -1);
  filterPointsDist(tpa, 0, 75.5, w div 2, h div 2);
  hi := length(tpa);
  for i := 0 to hi - 1 do
    if ((fastGetPixel(map, tpa[i].x - 1, tpa[i].y - 1) - fastGetPixel(map, tpa[i].x, tpa[i].y - 1)) = 6381921) then
    begin
      result := true;
      p.x := tpa[I].x + MMX1;
      p.y := tpa[I].y + MMY1;
      break;
    end;

  t := getImageTarget;
  setKeyMouseTarget(kmTarget);
  setImageTarget(iTarget);
  freeTarget(t);
  freeBitmap(map);
end;

(*
flagPresent
~~~~~~~~~~~

.. code-block:: pascal

    function flagPresent(var p: TPoint): boolean;

T/F depending on flag exist. Stores coords in 'p'


.. note::

    by weequ & NCDS

Example:

.. code-block:: pascal

    if flagPresent(pointOfFlag) then
      ...

*)
function flagPresent(var p: TPoint): boolean; overload;
begin
  result := findFlag(p) or findFlag2(p);
end;

(*
flagPresent
~~~~~~~~~~~

.. code-block:: pascal

    function flagPresent: boolean;

T/F depending on flag exist.


.. note::

    by NCDS

Example:

.. code-block:: pascal

    if flagPresent then
      ...

*)
function flagPresent: boolean; overload;
var
  p: tpoint;
begin
  result := flagPresent(p);
end;

(*
flagDistance
~~~~~~~~~~~~

.. code-block:: pascal

    function flagDistance: integer;

Returns distance in pixels your char dot is from flag on mini-map


.. note::

    by weequ

Example:

.. code-block:: pascal

    if flagDistance < dist then
      ...

*)
function flagDistance: integer;
var
  p: TPoint;
begin
  result := -1;
  if flagPresent(p) then
    result := distance(MMCX, MMCY, p.x, p.y);
end;

(*
walkingToFlag
~~~~~~~~~~~~~

.. code-block:: pascal

    function walkingToFlag(waitTime: integer): boolean;

Checks if your charachter is moving; stores current flagDistance to a variable,
waits "waitTime" ms and then checks the flagDistance again.
if it differs from the distance stored in the variable, function returns true.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal

    while walkingToFlag(100) do
      ...

*)
function walkingToFlag(waitTime: integer): boolean;
var
  firstDistance: integer;
begin
  result := false;
  if (not flagPresent()) then exit;
  firstDistance := flagDistance;
  wait(waitTime);
  result := (firstDistance <> flagDistance);
end;

(*
flag
~~~~~~

.. code-block:: pascal

    function flag(dist: integer = 0): boolean;

Waits until Flag is within "distance" distance.

.. note::

    by Wizzup? / WT-Fakawi / ZephyrsFury / N1ke! / weequ

Example:

.. code-block:: pascal

    flag(); //Waits until flag is gone
    flag(10) //waits until flag is within a distance of 10


*)
function flag(dist: integer = 0): boolean;
var
  m, d1, d2: integer;
  p: TPoint;
begin
  result := false;
  m := getSystemTime;
  repeat
    if (not flagPresent(p)) then
      exit(true);
    d1 := distance(p.x, p.y, MMCX, MMCY);
    if (d1 <= dist) then
      exit(true);
    if (d1 > dist+12) then
      wait(450+random(70))
    else
      wait(50+random(50));

    if (getColor(6, 6) <> 13092807) then // border of the loading message
      if (getSystemTime - m > 5000) then
      begin
        if (d1 = d2) then Exit;
        d2 := d1;
        m := getSystemTime;
      end;
    if SRL_HasProc(SRL_AntiBan) then
      SRL_Procs[SRL_AntiBan]();
  until not loggedIn;
end;

(*
mouseFlag
~~~~~~~~~~~

.. code-block:: pascal

    function mouseFlag(pt: TPoint; xMod, yMod, flagDist: integer;
                                 checkForFlag: boolean): boolean;

pt is the point you want to click.
Xmod and Ymod is the adjustment for each click without finding a flag.
FlagDist is how close you want to be (in pixels) to the flag before exiting.
CheckForFlag = True if you want to exit the function if a flag is present.

.. note::

    by EvilChicken!

Example:

.. code-block:: pascal


*)
function mouseFlag(pt: TPoint; xMod, yMod, flagDist: integer;
  checkForFlag: boolean): boolean;
var
  i: integer;
  p: TPoint;
begin
  result := false;
  if (flagPresent) then
    if (checkForflag) or (flagDistance <= flagDist) then exit;

  p := point(pt.x - xMod, pt.y - yMod);
  xMod := max(xMod, 3);
  yMod := max(yMod, 3);

  for i := 0 to 4 do
  begin
    p.Inc(xMod+random(3), yMod+random(3));
    if not onMinimap(p) then continue;
    mouse(p, mouse_left);
    result := waitFunc(@flagPresent(), 50, 3000);
    if (result) then break;
  end;
  if (flagDist > -1) then
    flag(flagDist);
end;
