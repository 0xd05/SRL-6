(*
BankScreen
==========

The bankscreen file holds functions and procedures that are used in the
Runescape bank screen.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/bankscreen.simba>`_.

*)

{$include_once interfaces.simba}
{$include_once pinscreen.simba}
{$include_once ../interfaces/gametabs/backpack.simba}
{$include_once ../core/text.simba}
{$include_once ../utilities/color.simba}

{$f-}

{*
const Internal
~~~~~~~~~~~~~~

Internal bankscreen constants.

*}
const
  _COLOR_BANK_TAB_ACTIVE = 4407350; // light color of an active bank tab

{*
const Internal
~~~~~~~~~~~~~~

Internal bankscreen constants.

*}
const
 _BANK_SLOTS_OFFSET: TPoint = [41, 108];
 _PACK_SLOTS_OFFSET: TPoint = [523, 111];
 _TAB_OFFSET: TPoint = [34, 65];

(*
const Deposit Buttons
~~~~~~~~~~~~~~~~~~~~~

Integer constants that represent the order of the quick deposit buttons.

*)
const
  QUICK_DEPOSIT_INVENTORY   = 0;
  QUICK_DEPOSIT_EQIUPMENT   = 1;
  QUICK_DEPOSIT_BOB         = 2;
  QUICK_DEPOSIT_MONEY_POUCH = 3;

const
  WITHDRAW_AMOUNT_ALL = -1;
  WITHDRAW_AMOUNT_ALL_BUT_ONE = -2;

const
  BANK_NPC_BLUE = 0;

(*
type TRSBankScreen
~~~~~~~~~~~~~~~~~~

A type that stores all the attributes and functions of the Runescape bankscreen.

*)
type
  TRSBankScreen = record(TRSInterface)
    __tabSlots: TBoxArray;
  end;

(*
var bankScreen
~~~~~~~~~~~~~~

The variable that holds all bankscreen information. It used when calling any functions
in this file.

Example:

.. code-block:: pascal

    if (bankScreen.isOpen()) then
      writeln('Bank is open!');

*)
var
  bankScreen: TRSBankScreen;

{*
TRSBankScreen.__init
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSBankScreen.__init();

Initializes the TRSBankScreen.

.. note::

    - by Olly
    - Last Updated: 10 August 2013 by Coh3n

Example:

.. code-block:: pascal

    minimap.__init();

*}
{$IFNDEF CODEINSIGHT}
procedure TRSBankScreen.__init();
begin
  with (self) do
  begin
    name := 'RS Bank Screen';
    ID := ID_INTERFACE_BANKSCREEN;
    parentID := -1;
    static := true;
  end;
end;
{$ENDIF}

{*
TRSBankScreen.__find
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.__find(): boolean;

Finds the TRSBankScreen by finding the text 'bank' in a button.

.. note::

    - by Olly
    - Last Updated: 04 October 2013 by Olly

Example:

.. code-block:: pascal

    bankScreen.__find();
*}
{$IFNDEF CODEINSIGHT}
function TRSBankScreen.__find(): boolean;
const
  TOP_BORDER_COLOR = 9998984;
  BOTTOM_BORDER_COLOR = 4932919;
  TEXT_COLOR = 13618403;
  BUTTON_WIDTH = 107;
var
  clientBox, b: TBox;
  tpa: TPointArray;
  atpa: T2DPointArray;
  i: integer;
  p: TPoint;
begin
  result := false;

  getClientDimensions(clientBox.x2, clientBox.y2);

  dec(clientBox.x2);
  dec(clientBox.y2);

  if (not findColors(tpa, TOP_BORDER_COLOR, 0, 0, clientBox.x2, clientBox.y2)) then
    exit();

  atpa := clusterTPAEx(tpa, 1, 1);

  for i := 0 to high(atpa) do
  begin
    b := atpa[i].getBounds();

    // wrong width?
    if (b.getWidth() <> BUTTON_WIDTH) then
      continue;

    incEx(b.y2, 24);

    // prevent out of bounds errors
    b.setLimit(clientBox);

    // if the bottom corners of the box are the bottom border colors there a button
    if (getColor(b.x1, b.y2) and getColor(b.x2, b.y2) = BOTTOM_BORDER_COLOR) then
      if (findText(p, TEXT_COLOR, 0, ['Bank'], [UpChars], b)) then
      begin
        // set the bounds based on where we found the text point.
        self.setBounds([p.x-114, p.y-572, p.x+573, p.y+27]);
        result := true;
        break();
      end;
  end;
end;
{$ENDIF}

(*
TRSBankScreen.isOpen
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.isOpen(waitTime: integer = 0): boolean;

Returns if the Bankscreen is open or not, optional parameter 'waitTime' which will wait
x amount of ms for the bankscreen to be open.

.. note::

    - by Olly
    - Last Updated: 04 October 2013 by Olly

Example:

.. code-block:: pascal

    if (bankScreen.isOpen()) then
      writeln('bankscreen is open! lets start banking items...');
*)
function TRSBankScreen.isOpen(waitTime: integer = 0): boolean;
var
  t: integer;
  b: TBox;
begin
  t := getSystemTime() + waitTime;
  result := false;

  repeat
    if (self.__find()) then
    begin
      result := true;
      break();
    end;

    if (waitTime > 0) then
      wait(20 + random(30));

  until (getSystemTime() >= t);
end;

(*
TRSBankScreen.close
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.close(): boolean;

Closes the bankscreen, will return if succesful or not.  Closes via the Escape
key.

.. note::

    - by Olly
    - Last Updated: 19 October 2013 by Olly

Example:

.. code-block:: pascal

    if (bankScreen.close()) then
      writeln('closed the bankscreen');
*)
function TRSBankScreen.close(): boolean;
var
  timeOut, t: integer;
begin
  result := false;
  timeOut := (getSystemTime() + 10000);
  t := 0;

  if (not self.isOpen()) then
    exit(true);

  typeByteWait(VK_ESCAPE, 150 + random(100));
  wait(50 + random(50));

  while (timeOut > getSystemTime()) do
  begin
    if (not self.isOpen()) then
    begin
      result := true;
      break;
    end;

    inc(t);

    wait(150 + random(100));

    // more than 9 loops, let's press the escape key again
    if (t > 9) then
    begin
      typeByteWait(VK_ESCAPE, 50 + random(100));
      wait(50 + random(50));
      t := 0;
    end;
  end;

  print('bankScreen.close(): result = ' + boolToStr(result), TDebug.SUB);
end;

(*
TRSBankScreen._isDepositButtonVaild
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen._isDepositButtonVaild(depositType: integer): boolean;

Returns if the deposit button is vaild or not.

.. note::

    - by Olly
    - Last Updated: 20 October 2013 by Olly

Example:

.. code-block:: pascal

    if (bankscreen._isDepositButtonVaild(DEPOSIT_BUTTON_DEPOSIT_ALL)) then
      writeln('yey!');
*)
function TRSBankScreen._isDepositButtonVaild(depositType: integer): boolean;
const
  DEPOSIT_BUTTON_LOW = 0;
  DEPOSIT_BUTTON_HIGH = 3;
begin
  result := inRange(depositType, DEPOSIT_BUTTON_LOW, DEPOSIT_BUTTON_HIGH);

  if (not result) then
    print('bankScreen._isDepositButtonVaild(): Button "' + intToStr(depositType) + '" is invaild', TDebug.WARNING);
end;

(*
TRSBankScreen._isBankSlotVaild
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen._isBankSlotVaild(slot: integer): boolean;

Returns if the bank slot is vaild or not.

.. note::

    - by Olly
    - Last Updated: 20 October 2013 by Olly

Example:

.. code-block:: pascal

    if (bankscreen._isBankSlotVaild(25)) then
      writeln('yey!');
*)
function TRSBankScreen._isBankSlotVaild(slot: integer): boolean;
const
  BANK_SLOT_LOW = 1;
  BANK_SLOT_HIGH = 100;
begin
  result := inRange(slot, BANK_SLOT_LOW, BANK_SLOT_HIGH);

  if (not result) then
    print('bankScreen._isBankSlotVaild(): Slot '+toStr(slot)+' is invalid', TDebug.WARNING);
end;

(*
TRSBankScreen.getBankSlotBoxes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.getBankSlotBoxes(): TBoxArray;

Returns a TBoxArray of all of the bank slot boxes.

.. note::

    - by Olly
    - Last Updated: 04 October 2013 by Olly

Example:

.. code-block:: pascal

    boxArr := bankScreen.getBankSlotBoxes();
*)
function TRSBankScreen.getBankSlotBoxes(): TBoxArray;
begin
  if (not self.isOpen()) then
  begin
    print('bankScreen.getBankSlotBoxes(): Unable to return bank slots since the bank isn''t open', TDebug.ERROR);
    exit();
  end;

  result := grid(10, 10, 35, 31, 44, 44, point(self.x + _BANK_SLOTS_OFFSET.x, self.y + _BANK_SLOTS_OFFSET.y));
end;

(*
TRSBankScreen.getBankSlotBox
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.getBankSlotBox(slot: integer): TBox;

Returns a TBox of the bank slot "slot". Layout: http://i.imgur.com/9yGO1zV.png

.. note::

    - by Olly
    - Last Updated: 04 October 2013 by Olly

Example:

.. code-block:: pascal

    box := bankScreen.getBankSlotBox(1);
*)
function TRSBankScreen.getBankSlotBox(slot: integer): TBox;
begin
  result := [-1, -1, -1, -1];

  if (not self._isBankSlotVaild(slot)) then
    exit();

  if (not self.isOpen()) then
  begin
    print('bankScreen.getBankSlotBox(): Unable to return bank slots since the bank isn''t open', TDebug.ERROR);
    exit();
  end;

  // - 1 because the grid (array) starts at 0.
  result := gridBox(slot -1, 10, 10, 35, 31, 44, 44, point(self.x + _BANK_SLOTS_OFFSET.x, self.y + _BANK_SLOTS_OFFSET.y));
end;

(*
TRSBankScreen.getPackSlotBoxes
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.getPackSlotBoxes: TBoxArray;

Returns a TBoxArray of all of the Backpack slots in the bank interface.

.. note::

    - by Olly
    - Last Updated: 04 October 2013 by Olly

Example:

.. code-block:: pascal

    boxArr := bankScreen.getBankSlotBoxes();
*)
function TRSBankScreen.getPackSlotBoxes: TBoxArray;
begin
  if (not self.isOpen()) then
  begin
    print('bankScreen.getpackSlotBoxes(): Unable to return backpack slots since the bank isn''t open', TDebug.ERROR);
    exit();
  end;

  result := grid(4, 7, 35, 31, 42, 36, point(self.x + _PACK_SLOTS_OFFSET.x, self.y + _PACK_SLOTS_OFFSET.y));
end;

(*
TRSBankScreen.getPackSlotBox
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.getPackSlotBox(slot: integer): TBox;

Returns the TBox of the desired pack item slot in the bank interface.  Pack slots
start at the top left at 1 and count across the columns.

.. note::

    - by Coh3n
    - Last Updated: 04 October 2013 by Olly

Example:

.. code-block:: pascal

    var
      b: TBox;
    begin
      b := bankscreen.getPackItemBounds(1);

*)
function TRSBankScreen.getPackSlotBox(slot: integer): TBox;
begin
  if (not inRange(slot, BACKPACK_SLOT_LOW, BACKPACK_SLOT_HIGH)) then
  begin
    print('bankScreen.getPackSlotBox(): Slot '+toStr(slot)+' is invalid', TDebug.WARNING);
    exit(intToBox(-1, -1, -1, -1));
  end;

  if (not self.isOpen()) then
  begin
    print('bankScreen.getPackSlotBox(): Unable to return pack slots since the bank isn''t open', TDebug.ERROR);
    exit();
  end;

  // - 1 because the grid (array) starts at 0.
  result := gridBox(slot -1, 4, 7, 35, 31, 42, 36, point(self.x + _PACK_SLOTS_OFFSET.x, self.y + _PACK_SLOTS_OFFSET.y));
end;

{*
TRSBankScreen._getTabBounds
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen._getTabBounds(tab: integer): TBox;

Returns the TBox of the desired tab slot in the bank interface.  Tab slots
start on the left at 1 and count across.

.. note::

    - by Coh3n
    - Last Updated: 10 August 2013 by Coh3n

Example:

.. code-block:: pascal

    var
      b: TBox;
    begin
      b := bankscreen._getTabBounds(1);

*}
function TRSBankScreen._getTabBounds(tab: integer): TBox;
begin
  if (not self.isOpen()) then
  begin
    print('Unable to get tab bounds since the bankscreen isn''t open', TDebug.ERROR);
    exit();
  end;

  // - 1 because the grid (array) starts at 0.
  result := gridBox(tab -1, 9, 1, 45, 35, 48, 0, point(self.x + _TAB_OFFSET.x, self.y + _TAB_OFFSET.y));
end;

{*
RSBankScreen._doesTabExist
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen._doesTabExist(tab: integer): boolean;

Returns true if the 'tab' exists.  If 'tab' is the "Add Tab" tab, it will return
false.

.. note::

    - by Coh3n
    - Last Updated: 10 August 2013 by Coh3n

Example:

.. code-block:: pascal

    if (not bankscreen._doesTabExist(3)) then
      exit();
*}
function TRSBankScreen._doesTabExist(tab: integer): boolean;
var
  tabBox: TBox;
  px, py: integer;
begin
  result := false;

  if (not self.isOpen()) then
    exit();

  tabBox := self._getTabBounds(tab);

  if (tabBox.x1 <> -1) then
    if (countColor(6672631, tabBox) <> 5) then // gold color of the very top of the "+"
      result := findColorTolerance(px, py, _COLOR_BANK_TAB_ACTIVE, tabBox, 5);
end;

(*
RSBankScreen.isTabActive
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.isTabActive(tab: integer): boolean;

Returns true if the 'tab' is active.

.. note::

    - by Coh3n
    - Last Updated: 10 August 2013 by Coh3n

Example:

.. code-block:: pascal

    if (not bankscreen.isTabActive(3)) then
      bankscreen.openTab(3);
*)
function TRSBankScreen.isTabActive(tab: integer): boolean;
var
  tabBox: TBox;
begin
  result := false;

  if (not self.isOpen()) then
    exit();

  tabBox := self._getTabBounds(tab);

  if (tabBox.x1 <> -1) then
    // light background color of an active tab - actual count is around 71 for an active tab
    result := (countColorTolerance(_COLOR_BANK_TAB_ACTIVE, tabBox, 5) > 50);
end;

(*
TRSBankScreen.openTab
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.openTab(tab: integer): boolean;

Opens the bank tab 'tab'.  Returns true if successful.

.. note::

    - by Coh3n
    - Last Updated: 10 August 2013 by Coh3n

Example:

.. code-block:: pascal

    bankscreen.openTab(4);
*)
function TRSBankScreen.openTab(tab: integer): boolean;
var
  boxTab: TBox;
  t: integer;
begin
  if (not self._doesTabExist(tab)) then
  begin
    print('TRSBankScreen.openTab(): Tab '+toStr(tab)+' doesn''t exist', TDebug.WARNING);
    exit(false);
  end;

  print('TRSBankScreen.openTab()', TDebug.HEADER);

  result := self.isTabActive(tab);

  if (not result) then
  begin
    boxTab := self._getTabBounds(tab);

    if (boxTab.x1 <> -1) then
    begin
      mouseBox(boxTab, MOUSE_LEFT);
      print('Tab is valid, clicking...');

      t := (getSystemTime() + 3000);

      while (not result) and (getSystemTime() < t) do
      begin
        print('Waiting for tab to activate...');
        result := self.isTabActive(tab);
        wait(300 + random(200));
      end;
    end;

  end else
    print('Tab '+toStr(tab)+' is already active');

  print('TRSBankScreen.openTab(): '+toStr(result), TDebug.FOOTER);
end;

(*
TRSBankScreen.scrollUp
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSBankScreen.scrollUp();

Will scroll the bankscreen up to the top if reqiured.

.. note::

    - by Olly
    - Last Updated: 10 August 2013 by Coh3n

Example:

.. code-block:: pascal

    bankScreen.scrollUp();
*)
procedure TRSBankScreen.scrollUp();
const
  COLOR_RESULT = 3321831; // color when scroll bar is all the way up
var
  col, t: integer;
  tpa: TPointArray;
  scrollP, p: TPoint;
  itemArea, b: TBox;
begin
  if (not self.isOpen()) then
    exit();

  p := [self.x + 474, self.y + 102]; // top of the scroll bar (when it's at the top)

  col := getColor(p);

  // color at top of scroller = already at top | no scroll bar color
  if (col = COLOR_RESULT) or (col = 1709067) then
    exit();

  print('bankScreen.scrollUp(): Going to scroll the bankscreen up to the top');

  b := self.getBounds();

  itemArea := [b.x1 + 13, b.y1 + 97, b.x2 - 221, b.y2 - 61];
  scrollP := itemArea.getRandomPoint();

  t := (getSystemTime() + 15000);

  // scroll the mouse using the mouse wheel
  repeat
    if (getColor(p) = COLOR_RESULT) then
      break;

    mouseScroll(scrollP, 10 + random(10), false);
    wait(10 + random(20));

  until(getSystemTime() > t);
end;

(*
TRSBankScreen.quickDeposit
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.quickDeposit(depositType: integer): boolean;

Will click the quick deposit button 'depositType', vaild deposit types are:

  * QUICK_DEPOSIT_INVENTORY
  * QUICK_DEPOSIT_EQIUPMENT
  * QUICK_DEPOSIT_BOB
  * QUICK_DEPOSIT_MONEY_POUCH

.. note::

    - by Olly
    - Last Updated: 05 October 2013 by Olly

Example:

.. code-block:: pascal

    bankScreen.quickDeposit(QUICK_DEPOSIT_INVENTORY);
*)
function TRSBankScreen.quickDeposit(depositType: integer): boolean;
const
  DEPOSIT_BUTTON_OFFSET: TPoint = [357, 575];
var
  b: TBox;
begin
  result := true;

  if (not self._isDepositButtonVaild(depositType)) then
    exit(false);

  if (not self.isOpen()) then
  begin
    print('bankScreen.quickDeposit(): Unable to quick-deposit since bankscreen isn''t open', TDebug.ERROR);
    exit(false);
  end;

  b := gridBox(depositType, 4, 1, 30, 20, 35, 0,
               point(self.x + DEPOSIT_BUTTON_OFFSET.x,
                     self.y + DEPOSIT_BUTTON_OFFSET.y));

  mouseBox(b, MOUSE_LEFT);
  wait(200 + random(300));

  print('bankScreen.quickDeposit(): Clicked quick deposit id ' + intToStr(depositType), TDebug.SUB);
end;

(*
TRSBankScreen._enterAmount
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen._enterAmount(amount, waitTime: integer): boolean;

Will enter the amount of items we want to deposit/withdraw if the interface is open
extremely similar to the convo box, but is different.

.. note::

    - by Olly
    - Last Updated: 20 October 2013 by Olly

Example:

.. code-block:: pascal

    bankScreen._enterAmount(50, 5000);
*)
function TRSBankScreen._enterAmount(amount, waitTime: integer): boolean;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  b: TBox;
  i, timeOut: integer;
begin
  result := false;
  getClientDimensions(b.x2, b.y2);

  timeout := (getSystemTime() + waitTime);

  dec(b.x2);
  dec(b.y2);

  repeat
    if (findColors(tpa, 0, b)) then
    begin
      atpa := tpa.cluster(10, 10);

      for i := 0 to high(atpa) do
        if (findText(tpa[0], 0, 0, ['Enter'], [UpCharsEx], atpa[i].getBounds())) then
        begin
          result := true;
          typeSend(toStr(amount), true);
          break(2);
        end;
    end;

    wait(200 + random(200));
  until (getSystemTime() > timeOut);

  print('bankScreen._enterAmount(): result = ' + boolToStr(result), TDebug.SUB);
end;

(*
TRSBankScreen.withdraw
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.withdraw(slot, amount: integer; mouseOverText: TStringArray): boolean;

Withdraws the the amount 'amount' from the bank slot 'slot', if the mouse-over
text is correct, mouse-over text can also be skipped.

 * extra vaild constants for 'amount' are:
   - WITHDRAW_AMOUNT_ALL = -1;
   - WITHDRAW_AMOUNT_ALL_BUT_ONE = -2;


.. note::

    - by Olly
    - Last Updated: 20 October 2013 by Olly

Example:

.. code-block:: pascal

    // To withdraw 28 items from slot 1 if mouseover text is vaild
    bankscreen.withdraw(1, 28, ['Yew Log', 'Log']);

     // To withdraw all items from slot 10 if mouseover text is vaild
    bankscreen.withdraw(10, WITHDRAW_AMOUNT_ALL, ['Yew Log', 'Log']);

    // To withdraw 28 items from slot 1 and will *ignore* mouse-over text
    bankScreen.withdraw(1, 28, ['']);
*)
function TRSBankScreen.withdraw(slot, amount: integer; mouseOverText: TStringArray): boolean;
var
  b: TBox;
begin
  result := false;
  b := self.getBankSlotBox(slot);

  if (b.x1 = -1) then // invaild slot
    exit;

  if (not isItemIn(b)) then // no item in the slot?
    exit;

  mouseBox(b, MOUSE_MOVE);

  if (length(mouseOverText[0]) > 0) then
    if (not isMouseOverText(mouseOverText, 130 + random(20))) then
    begin
      print('bankscreen.withdraw(): Incorrect Mouse-over text, result = false', TDebug.SUB);
      exit(false);
    end;

  if (amount = 1) then     // single item? let's just click it
  begin
    fastClick(MOUSE_LEFT);
    wait(400 + random(300));
    print('bankscreen.withdraw(): result = true', TDebug.SUB);
    exit(true);
  end else
    fastClick(MOUSE_RIGHT);  // more than 1 item? open choose options

  wait(20 + random(50));

  case (amount) of
    WITHDRAW_AMOUNT_ALL: result := chooseOption.select(['Withdraw-All', '-All']);
    WITHDRAW_AMOUNT_ALL_BUT_ONE: result := chooseOption.select(['Withdraw-All but one', 'All but one']);

    // check if the number is already availble, else let's withdraw X it
    else
      if (not chooseOption.optionsExist(['Withdraw-' + intToStr(amount) + ' ', '-' + intToStr(amount) + ' '])) then
      begin
        if (chooseOption.select(['Withdraw-X', '-X'])) then
          result := (self._enterAmount(amount, 6000))
      end else
        result := chooseOption.select(['Withdraw-' + intToStr(amount) + ' ', '-' + intToStr(amount) + ' '])
   end;

   if (result) then
     wait(400 + random(300));

   print('bankscreen.withdraw(): result = ' + boolToStr(result), TDebug.SUB);
end;

(*
TRSBankScreen.pointToSlot
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.pointToSlot(pnt: TPoint): integer;

Returns the slot in which the TPoint 'pnt' fall within, if fails to fall in any
slot will return -1.

.. note::

    - by Olly
    - Last Updated: 20 October 2013 by Olly

Example:

.. code-block:: pascal

    writeln(bankscreen.pointToSlot(p));
*)
function TRSBankScreen.pointToSlot(pnt: TPoint): integer;
var
  i: integer;
  slots: TBoxArray;
  hi: integer;
begin
  result := -1;

  slots := self.getBankSlotBoxes();
  hi := high(slots);

  for i := 0 to hi do
    if (pointInBox(pnt, slots[i])) then
      exit(i + 1); // +1 since array starts at 0.
end;

(*
TRSBankScreen.withdraw; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.withdraw(dtm, amount: integer): boolean; overload;

Searches for the dtm 'dtm' in each slot if found, will withdraw the amount
'amount' from that bank slot.

.. note::

    - by Olly
    - Last Updated: 20 October 2013 by Olly

Example:

.. code-block:: pascal

    bankScreen.withdraw(dtm, 28);
*)
function TRSBankScreen.withdraw(dtm, amount: integer): boolean; overload;
var
  p: TPoint;
  slot: integer;
  b: TBox;
begin
  result := false;

  // just to wait for items to appear in bank
  b := self.getBankSlotBoxes().getBounds();
  waitColorCountRange(ITEM_OUTLINE_BLACK, 0, b, 3600 + random(500), 1);

  if (not findDTM(dtm, p.x, p.y, b)) then
    exit;

  slot := self.pointToSlot(p);

  if (slot <> -1) then
    result := self.withdraw(slot, amount, ['']);
end;

(*
TRSBankScreen.withdraw; overload
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSBankScreen.withdraw(bitmap, tolerance, amount: integer): boolean; overload;

Searches for the bitmap 'bitmap' with the tolerance 'tolerance' in each slot
if found, will withdraw the amount 'amount' from that bank slot.

.. note::

    - by Olly
    - Last Updated: 20 October 2013 by Olly

Example:

.. code-block:: pascal

    bankScreen.withdraw(bmp, 10, 28);
*)
function TRSBankScreen.withdraw(bitmap, tolerance, amount: integer): boolean; overload;
var
  p: TPoint;
  slot: integer;
  b: TBox;
begin
  result := false;

  // just to wait for items to appear in bank
  b := self.getBankSlotBoxes().getBounds();
  waitColorCountRange(ITEM_OUTLINE_BLACK, 0, b, 2500 + random(500), 1);

  if (not findBitmapToleranceIn(bitmap, p.x, p.y, b, tolerance)) then
    exit;

  slot := self.pointToSlot(p);

  if (slot <> -1) then
    result := self.withdraw(slot, amount, ['']);
end;

function _waitBankOrPinScreen(waitTime: integer): boolean;
var
  t: integer;
begin
  t := (getSystemTime() + waitTime);
  result := false;

  while (t > getSystemTime()) do
  begin
    if (bankScreen.isOpen()) or (pinScreen.isOpen()) then
      exit(true);

    wait(25 + random(25));
  end;
end;

function TRSBankScreen.__openNPC(): boolean;
const
  colorBlue: TColorData = [[5847106, 5188663], [8, 12], [[2, 0.31, 0.15], [2, 0.23, 0.51]]]; {light, dark}
  colorHair: TColorData = [[1534114, 1918035], [14, 7], [[2, 0.13, 0.78], [2, 0.28, 1.03]]]; {orange, brown}
var
  i, j, hi, wid, hei, t, dist: integer;
  atpa, atpaBody, atpaHair: T2DPointArray;
  tpa: TPointArray;
  b, searchArea, mainScreenBox: TBox;
begin
  t := getSystemTime();

  result := false;
  mainScreenBox := mainScreen.getBounds();

  print('TRSBankscreen.__openNPC()', TDebug.HEADER);

  if (colorBlue.gather(tpa, mainScreenBox) and (length(tpa) > 25)) then
  begin
    atpa := tpa.cluster(5, 5);
    hi := high(atpa);

    for i := 0 to hi do
    begin
      if (length(atpa[i]) < 20) or (atpa[i].getDensity() < 0.10) then
        continue;

      atpa[i].getBounds().getDimensions(wid, hei);

      if (wid < 10) or (hei < 10) then
        continue;

      insert(atpa[i], atpaBody);
    end;

    print('Found '+intToStr(length(atpaBody))+' possible banker bodys');

    for i := 0 to high(atpaBody) do
    begin
      b := getTPABounds(atpaBody[i]);

      searchArea := [b.x1 - 20, b.y1 -20, b.x2 +20, b.y1 + 20];
      searchArea.setLimit(mainScreenBox);

      if (colorHair.gather(tpa, searchArea)) then
      begin
        atpa := tpa.cluster(3, 3);

        for j := 0 to high(atpa) do
        begin
          if (length(atpa[j]) < 5) then
            continue;

          atpa[j].getBounds().getDimensions(wid, hei);

          if (wid > 18) or (hei > 18) or (wid < 2) or (hei < 2) then
            continue;

          insert(atpa[j], atpaHair);
        end;
      end;
    end;

    print('Found '+intToStr(length(atpaHair))+' possible heads');

    if (length(atpaHair) < 1) or (length(atpaBody) < 1) then
    begin
      print('Didn''t find enough hair or bodys');
      print('TRSBankscreen.__openNPC(): result = '+boolToStr(result), TDebug.FOOTER);
      exit;
    end;

    print('Finished gathering in '+intToStr(getSystemTime() - t)+' ms');

    sortATPAFromMidPoint(atpaBody, mainScreen.getPlayerPoint());

    for i := 0 to high(atpaBody) do
    begin
      sortTPAByY(atpaBody[i], true);

      for j := 0 to high(atpaHair) do
      begin
       dist := (distance(atpaBody[i][0], atpaHair[j].getMiddle()));

       if (dist <= 20) then
       begin
         print('Distance between body['+intToStr(i)+'] and hair['+intToStr(j)+'] is less than 20, going to check the mouse-over text');

         mouse(atpaBody[i].getMiddle().randRange(-5, 5));

         if (isMouseOverText(['Talk-to Banker', ' Banker', 'Bank ', 'nk booth'])) then
         begin
           print('We found correct mouse-over text');
           fastClick(MOUSE_RIGHT);

           if (chooseOption.select(['Bank Bank', 'ank Banker', 'ank Bank'])) then
           begin
             wait(50 + random(100));

             if (minimap.isFlagPresent()) then
               minimap.waitFlag(10);

             result := _waitBankOrPinScreen(10000);

             if (result) then
               print('Bankscreen or pinscreen is open')
             else
               print('Bankscreen or pinscreen never opened..');

             break(2);
           end;
         end else
           print('Mouse-over text wasn''t correct..');
       end;
      end;
    end;
  end else
    print('Didnt find enough banker blue');

  print('TRSBankscreen.__openNPC(): result = '+boolToStr(result), TDebug.FOOTER);
end;

function TRSBankScreen.open(bankType: integer): boolean;
begin
  case bankType of
    BANK_NPC_BLUE: result := self.__openNPC();
  end;
end;

begin
  bankscreen.__init();
end;

