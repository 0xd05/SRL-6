(*
Production
==========

The pinscreen file holds functions and procedures that are used in the
Runescape production screen.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/interfaces/production.simba>`_.

*)

{$f-}

{$include_once interfaces.simba}

(*
type TRSProductionScreen
~~~~~~~~~~~~~~~~~~~~~~~~

A type that stores the production interface properties.
*)
type
  TRSProductionScreen = type TRSInterface;

(*
var productionScreen
~~~~~~~~~~~~~~~~~~~~

Variable that stores functions and properties of the Runescape production interface.

Example:

.. code-block:: pascal

    if (productionScreen.isOpen() then
      writeln('Production screen is open!');
*)
var
  productionScreen: TRSProductionScreen;

{*
TRSProductionScreen.__init
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TRSProductionScreen.__init();

Initializes the TRSProductionSceen.

.. note::

    - by Olly
    - Last Updated: 06 November 2013 by Olly

Example:

.. code-block:: pascal

    productionScreen.__init();
*}
{$IFNDEF CODEINSIGHT}
procedure TRSProductionScreen.__init();
begin
  with (self) do
  begin
    name := 'RS Production Screen';
    ID := ID_INTERFACE_PRODUCTION;
    parentID := -1;
    static := false;
  end;
end;
{$ENDIF}

{*
TRSProductionScreen.__find
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSProductionScreen.__find(): boolean;

Attempts to find the production screen, if found will set the bounds.

.. note::

    - by Olly
    - Last Updated: 06 November 2013 by Olly

Example:

.. code-block:: pascal

    productionScreen.__find();
*}
{$IFNDEF CODEINSIGHT}
function TRSProductionScreen.__find(): boolean;
const
  BOX_DIMENSION = 35;
  COL_BACKGROUND = 921102;
  COL_BORDER = 1064046;
var
  bw, bh, i, wid, hei: integer;
  tpa: TPointArray;
  atpa: T2DPointArray;
  b: TBox;
begin
  result := false;

  getClientDimensions(wid, hei);

  if (findColors(tpa, COL_BORDER, 0, 0, wid-1, hei-1)) then // brown border
  begin
    atpa := tpa.cluster(10, 10);

    for i := 0 to high(atpa) do
    begin
      b := atpa[i].getBounds();
      b.getDimensions(bw, bh);

      if (bw and bh = BOX_DIMENSION) then // so it's a square
        if (getColor(b.x1 -4, b.y1) = COL_BACKGROUND) then // check b.x1 -4 is the backgound color
          if (countColor(clWhite, b.x1, b.y1, min(b.x2 + 100, wid -1), b.y2) > 5) then // find some white text to the right
          begin
            b.edit(-240, -42, 230, 248);
            self.setBounds(b);
            exit(true);
          end;
    end;
  end;
end;
{$ENDIF}

(*
TRSProductionScreen.isOpen
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSProductionScreen.isOpen(waitTime: integer = 0): boolean;

Returns true if the production screen is open, includes a optional parameter
'waitTime' (default 0) which will search for the production screen until
'waitTime' is reached.

.. note::

    - by Olly
    - Last Updated: 06 November 2013 by Olly

Example:

.. code-block:: pascal

    if (productionScreen.isOpen()) then
      writeln('it''s open!');
*)
function TRSProductionScreen.isOpen(waitTime: integer = 0): boolean;
var
  t: integer;
begin
  t := getSystemTime() + waitTime;

  repeat
    if (self.__find()) then
    begin
      result := true;
      break;
    end;

    if (waitTime > 0) then
      wait(25 + random(25));

  until (getSystemTime() >= t);

  print('TRSProductionScreen.isOpen(): result = '+lowercase(boolToStr(result))+' ('+intToStr(getSystemTime() + waitTime - t)+'ms)', TDebug.SUB);
end;

(*
TRSProductionScreen.clickStart
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TRSProductionScreen.clickStart(): boolean;

Attempts to click the blue "start" button, returns if succesfull or not.

.. note::

    - by Olly
    - Last Updated: 06 November 2013 by Olly

Example:

.. code-block:: pascal

    if (productionScreen.clickStart()) then
      writeln('We started making something!');
*)
function TRSProductionScreen.clickStart(): boolean;
var
  b: TBox;
begin
  result := false;

  if (self.isOpen()) then
  begin
    b := [self.x +252, self.y + h - 30, self.x + w - 29, self.y + h-3];  // set the bounds based on where the production screen was found
    mouseBox(b, MOUSE_LEFT);

    result := true;
    wait(150 + random(150));
  end;

  print('TRSProductionScreen.clickStart(): result = ' + lowercase(boolToStr(result)), TDebug.SUB);
end;

begin
  productionScreen.__init();
end;
