(*
Box Arrays
==============

A file that stores type functions to manipulate TBoxArrays.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/utilities/types/tboxarrays.simba>`_.

*)

{$f-}

(*
TBoxArray.toATPA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.toATPA() : T2DPointArray;

Turns a TBoxArray into a T2DPointArray.

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    atpa := tba.toATPA();

*)
function TBoxArray.toATPA() : T2DPointArray;
var
  i : integer;
begin
  setLength(result, length(self));
  for i := 0 to high(self) do
    result[i] := self[i].createTPA();
end;

(*
TBoxArray.toTPA
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.toTPA() : TPointArray;

Turns a TBoxArray into a TPointArray.

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    atpa := tba.toTPA();

*)
function TBoxArray.toTPA() : TPointArray;
var
  i : integer;
  atpa: T2DPointArray;
begin
  atpa := self.toATPA();
  result := atpa.merge();
  result.clearEquals();
end;

(*
TBoxArray.copy
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.copy() : TBoxArray;

Copies a TBoxArray

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    newTba := tba.copy();

*)
function TBoxArray.copy() : TBoxArray;
var
  i : integer;
begin
  setLength(result, length(self));
  for i := 0 to high(self) do
    result[i] := self[i];
end;

(*
TBoxArray.getBounds
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.getBounds(): TBox;

Returns the bounds of the TBoxArray.

.. note::

    - by Janilabo
    - Last Updated: 17 September 2013 by Janilabo

Example:

.. code-block:: pascal

    b := tba.getBounds();
*)
function TBoxArray.getBounds(): TBox;
var
  h, i: Integer;
  e: TBox;
begin
  h := High(self);
  if (h > -1) then
  begin
    Result := TBox(self[0]);
    if (h < 1) then
      Exit;
    for i := 1 to h do
    begin
      if (Result.X1 > self[i].X1) then
        Result.X1 := Integer(self[i].X1);
      if (Result.Y1 > self[i].Y1) then
        Result.Y1 := Integer(self[i].Y1);
      if (Result.X2 < self[i].X2) then
        Result.X2 := Integer(self[i].X2);
      if (Result.Y2 < self[i].Y2) then
        Result.Y2 := Integer(self[i].Y2);
    end;
  end else
    Result := e;
end;

(*
TBoxArray.equals
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.equals() : boolean;

Compares two TBoxArrays

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    if (tba.equals(otherTBA)) then ... ;

*)
function TBoxArray.equals(const tba: TBoxArray) : boolean;
var
  i : integer;
begin
  result := false;
  if (length(self) <> length(tba)) then exit;

  for i := 0 to high(tba) do
    if (not self.isInArray(tba[i])) then exit;

  result := true;
end;

(*
TBoxArray.offset
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoxArray.offset(const p: TPoint);

Offsets all boxes in the array by "P"

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    tba.offset([110,68]);

*)
procedure TBoxArray.offset(const p: TPoint);
var
  i : integer;
begin
  for i := 0 to high(self) do
    self[i].offset(p);
end;

(*
TBoxArray.getMiddle
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.getMiddle(): TPoint;

Returns the center of the (bounds of the) box array

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    midpoint := tba.getMiddle();

*)
function TBoxArray.getMiddle(): TPoint;
var
  i : integer;
begin
  result := self.getBounds().getMiddle();
end;

(*
TBoxArray.setLimit
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoxArray.setLimit(const b: TBox);

Offsets all boxes in the array by "P"

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    tba.setLimit(mainscreen.getBounds());

*)
procedure TBoxArray.setLimit(const b: TBox);
var
  i : integer;
begin
  for i := 0 to high(self) do
    self[i].setLimit(b);
end;

(*
TBoxArray.expand
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoxArray.expand(const size: integer);

Increases (expands) the size of all boxes in the array by “size”.

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    tba.expand(5);

*)
procedure TBoxArray.expand(const size: integer);
var
  i : integer;
begin
  for i := 0 to high(self) do
    self[i].expand(size);
end;

(*
TBoxArray.shrink
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TBoxArray.shrink(const size: integer);

Shrinks the size of all boxes in the array by ‘size’.

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    tba.shrink(12);

*)
procedure TBoxArray.shrink(const size: integer);
var
  i : integer;
begin
  for i := 0 to high(self) do
    self[i].shrink(size);
end;

(*
TBoxArray.pixelShiftAverage
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.pixelShiftAverage(wait: integer = 200; max: integer = 810): TIntegerArray;

Measures the average pixel shift of each box over time

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    tia := tba.pixelShiftAverage(150, 5000);

*)
function TBoxArray.pixelShiftAverage(wait: integer = 200; max: integer = 850): TIntegerArray;
begin
   result := getPixelShiftAverage(self, wait, max);
end;

(*
TBoxArray.pixelShift
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.pixelShift(time: integer = 200): TIntegerArray;

Measures the pixel shift of each box over a time period

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    tia := tba.pixelShift(150);

*)
function TBoxArray.pixelShift(time: integer = 200): TIntegerArray;
begin
   result := getPixelShift(self, time);
end;

(*
TBoxArray.getColors
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.getColors(clearSame: boolean = true): TIntegerArray;

Returns an array of the colors found inside the TBoxArray. Will clear the same colors if clearSame is set to true.

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    tia := tba.getColors();

*)
function TBoxArray.getColors(clearSame: boolean = true): TIntegerArray;
var
  i : integer;
  tia: TIntegerArray;
begin
  for i := 0 to high(self) do
  begin
    tia := self[i].getColors(clearSame);
    result.combine(tia);
  end;
end;

(*
TBoxArray.colorExists
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TBoxArray.colorExists(color: integer; tolerance: integer = 0): boolean;

Returns true if the color is found within the TBoxArray. Also includes a optional tolerance parameter.

.. note::

    - by bonsai
    - Last Updated: 10 October 2014 by bonsai

Example:

.. code-block:: pascal

    if (tba.colorExists(512290, 7)) then ... ;

*)
function TBoxArray.colorExists(color: integer; tolerance: integer = 0): boolean;
var
  i : integer;
  tia: TIntegerArray;
begin
  for i := 0 to high(self) do
    if (self[i].colorExists(color, tolerance)) then
    begin
      result := true;
      exit;
    end;
  result := false;
end;

{$f+}
