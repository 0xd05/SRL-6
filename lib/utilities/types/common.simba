(*
Common
======

A file that stores common type functions to manipulate arrays.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/utilities/types/common.simba>`_.

Contributers:
  - Zyt3x
  - bonsai
  - Coh3n
  - Olly (Ollybest)
  - masterBB

*)

(*
array.new
~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.new(const str : String; const index : Integer = 0);
    procedure TIntegerArray.new(const int : Integer; const index : Integer = 0);
    procedure TExtendedArray.new(const ext : Extended; const index : Integer = 0);
    procedure TPointArray.new(const p : TPoint; const index : Integer = 0);
    procedure TBoxArray.new(const box : TBox; const index : Integer = 0);

Used to add an element to an array at a chosen index.

Example:

.. code-block:: pascal

    A.new('example');
    A2.new('new example', 0);

*)
procedure TStringArray.new(const str : String; const index : Integer = 0);
begin
  insert(str, self, index);
end;

procedure TIntegerArray.new(const int : Integer; const index : Integer = 0);
begin
  insert(int, self, index);
end;

procedure TExtendedArray.new(const ext : Extended; const index : Integer = 0);
begin
  insert(ext, self, index);
end;

procedure TPointArray.new(const p : TPoint; const index : Integer = 0);
begin
  insert(p, self, index);
end;

procedure TBoxArray.new(const box : TBox; const index : Integer = 0);
begin
  insert(box, self, index);
end;

(*
array.remove
~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.remove(const index : Integer);
    procedure TIntegerArray.remove(const index : Integer);
    procedure TExtendedArray.remove(const index : Integer);
    procedure TPointArray.remove(const index : Integer);
    procedure TBoxArray.remove(const index : Integer);

Used to delete an element of an array at a chosen index.

Example:

.. code-block:: pascal

    A.remove(0);

*)
procedure TStringArray.remove(const index : Integer);
begin
  delete(self, index);
end;

procedure TIntegerArray.remove(const index : Integer);
begin
  delete(self, index);
end;

procedure TExtendedArray.remove(const index : Integer);
begin
  delete(self, index);
end;

procedure TPointArray.remove(const index : Integer);
begin
  delete(self, index);
end;

procedure TBoxArray.remove(const index : Integer);
begin
  delete(self, index);
end;

(*
array.append
~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.append(const str : String);
    procedure TIntegerArray.append(const int : Integer);
    procedure TExtendedArray.append(const ext : Extended);
    procedure TPointArray.append(const p : TPoint);
    procedure TBoxArray.append(const box : TBox);

Used to append a value to an array.

Example:

.. code-block:: pascal

    A.append('example');

*)
procedure TStringArray.append(const str : String);
begin
  self.new(str, length(self));
end;

procedure TIntegerArray.append(const int : Integer);
begin
  self.new(int, length(self));
end;

procedure TExtendedArray.append(const ext : Extended);
begin
  self.new(ext, length(self));
end;

procedure TPointArray.append(const p : TPoint);
begin
  self.new(p, length(self));
end;

procedure TBoxArray.append(const box : TBox);
begin
  self.new(box, length(self));
end;

(*
array.push
~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.push(const str : TStringArray);
    procedure TIntegerArray.push(const int : Integer);
    procedure TExtendedArray.push(const ext : Extended);
    procedure TPointArray.push(const p : TPoint);
    procedure TBoxArray.push(const box : TBox);

Used to push an element to an array.

Example:

.. code-block:: pascal

    A.push('example');

*)
procedure TStringArray.push(const str : String);
begin
  self.new(str);
end;

procedure TIntegerArray.push(const int : Integer);
begin
  self.new(int);
end;

procedure TExtendedArray.push(const ext : Extended);
begin
  self.new(ext);
end;

procedure TPointArray.push(const p : TPoint);
begin
  self.new(p);
end;

procedure TBoxArray.push(const box : TBox);
begin
  self.new(box);
end;

(*
array.merge
~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.merge(const arr : TStringArray);
    procedure TIntegerArray.merge(const arr : TIntegerArray);
    procedure TExtendedArray.merge(const arr : TExtendedArray);
    procedure TPointArray.merge(const arr : TPointArray);
    procedure TBoxArray.merge(const arr : TBoxArray);

Used to merge two arrays.

Example:

.. code-block:: pascal

    A.merge(['some' 'example', 'array']);
    A.merge(A2);

*)
procedure TStringArray.merge(const arr : TStringArray);
begin
  insert(arr, self, length(self));
end;

procedure TIntegerArray.merge(const arr : TIntegerArray);
begin
  insert(arr, self, length(self));
end;

procedure TExtendedArray.merge(const arr : TExtendedArray);
begin
  insert(arr, self, length(self));
end;

procedure TPointArray.merge(const arr : TPointArray);
begin
  insert(arr, self, length(self));
end;

procedure TBoxArray.merge(const arr : TBoxArray);
begin
  insert(arr, self, length(self));
end;

(*
array.slice
~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.slice(const sindex, eindex : Integer): TStringArray;
    function TIntegerArray.slice(const sindex, eindex : Integer): TIntegerArray;
    function TExtendedArray.slice(const sindex, eindex : Integer): TExtendedArray;
    function TPointArray.slice(const sindex, eindex : Integer): TPointArray;
    function TBoxArray.slice(const sindex, eindex : Integer): TBoxArray;

Returns the elements [sindex..eindex] of an array.

Example:

.. code-block:: pascal

    A := A.slice(1, high(A));

*)

function TStringArray.slice(const sindex, eindex : Integer): TStringArray;
begin
  result := copy(self, sindex, eindex-1);
end;

function TIntegerArray.slice(const sindex, eindex : Integer): TIntegerArray;
begin
  result := copy(self, sindex, eindex-1);
end;

function TExtendedArray.slice(const sindex, eindex : Integer): TExtendedArray;
begin
  result := copy(self, sindex, eindex-1);
end;

function TPointArray.slice(const sindex, eindex : Integer): TPointArray;
begin
  result := copy(self, sindex, eindex-1);
end;

function TBoxArray.slice(const sindex, eindex : Integer): TBoxArray;
begin
  result := copy(self, sindex, eindex-1);
end;

(*
array.element
~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.element(const str : String): Integer;
    function TIntegerArray.element(const int : Integer): Integer;
    function TExtendedArray.element(const ext : Extended): Integer;
    function TPointArray.element(const p : TPoint): Integer;
    function TBoxArray.element(const box : TBox): Integer;

Returns the first index of where the value was found in an array.  Returns -1 if not found.

Example:

.. code-block:: pascal

    writeLn(A.element('example'));

*)
function TStringArray.element(const str : String) : Integer;
var
  I : Integer;
begin
  result := -1;
  for I := 0 to high(self) do
    if (self[I] = str) then exit(I);
end;

function TIntegerArray.element(const int : Integer): Integer;
begin
  inIntArrayEx(self, result, int);
end;

function TExtendedArray.element(const ext : Extended): Integer;
var
  I : Integer;
begin
  result := -1;
  for I := 0 to high(self) do
    if (self[I] = ext) then exit(I);
end;

function TPointArray.element(const p : TPoint): Integer;
var
  I : Integer;
begin
  result := -1;
  for I := 0 to high(self) do
    if (self[I].equals(p)) then exit(I);
end;

function TBoxArray.element(const box : TBox): Integer;
var
  I : Integer;
begin
  result := -1;
  for I := 0 to high(self) do
    if (self[i].equals(box)) then exit(I);
end;

(*
array.elements
~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.elements(const str : String): TIntegerArray;
    function TIntegerArray.elements(const int : Integer): TIntegerArray;
    function TExtendedArray.elements(const ext : Extended): TIntegerArray;
    function TPointArray.elements(const p : TPoint): TIntegerArray;
    function TBoxArray.elements(const box : TBox): TIntegerArray;

Returns the indexes of where the value was found in an array.  Returns -1 if not found.

Example:

.. code-block:: pascal

    writeLn(A.element('example'));

*)

function TStringArray.elements(const str : String): TIntegerArray;
var
  I : Integer;
begin
  for I := high(self) downto 0 do
    if self.element(str) > -1 then
      insert(I, result);
end;

function TIntegerArray.elements(const int : Integer): TIntegerArray;
var
  I : Integer;
begin
  for I := high(self) downto 0 do
    if self.element(int) > -1 then
      insert(I, result);
end;

function TExtendedArray.elements(const ext : Extended): TIntegerArray;
var
  I : Integer;
begin
  for I := high(self) downto 0 do
    if self.element(ext) > -1 then
      insert(I, result);
end;

function TPointArray.elements(const p : TPoint): TIntegerArray;
var
  I : Integer;
begin
  for I := high(self) downto 0 do
    if self.element(p) > -1 then
      insert(I, result);
end;

function TBoxArray.elements(const box : TBox): TIntegerArray;
var
  I : Integer;
begin
  for I := high(self) downto 0 do
    if self.element(box) > -1 then
      insert(I, result);
end;

(*
array.inArray
~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.inArray(const str : String): Boolean;
    function TIntegerArray.inArray(const int : Integer): Boolean;
    function TExtendedArray.inArray(const ext : Extended): Boolean;
    function TPointArray.inArray(const p : TPoint): Boolean;
    function TBoxArray.inArray(const box : TBox): Boolean;

Returns True if the value is present in the TStringArray.

Example:

.. code-block:: pascal

    writeLn(A.inArray('example'));

*)
function TStringArray.inArray(const str : String) : Boolean;
begin
  result := self.element(str) > -1;
end;

function TIntegerArray.inArray(const int : Integer): Boolean;
begin
  result := self.element(int) > -1;
end;

function TExtendedArray.inArray(const ext : Extended): Boolean;
begin
  result := self.element(ext) > -1;
end;

function TPointArray.inArray(const p : TPoint): Boolean;
begin
  result := self.element(p) > -1;
end;

function TBoxArray.inArray(const box : TBox): Boolean;
begin
  result := self.element(box) > -1;
end;

(*
array.include
~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.include(const arr : TStringArray): TStringArray;
    function TIntegerArray.include(const arr : TIntegerArray): TIntegerArray;
    function TExtendedArray.include(const arr : TExtendedArray): TExtendedArray;
    function TPointArray.include(const arr : TPointArray): TPointArray;
    function TBoxArray.include(const arr : TBoxArray): TBoxArray;

Returns an array which contains values that are present in both arrays.

Example:

.. code-block:: pascal

    A := A2.include(A);

*)
function TStringArray.include(const arr : TStringArray) : TStringArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.inArray(arr[I]) then
      result.append(arr[I]);
end;

function TIntegerArray.include(const arr : TIntegerArray): TIntegerArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.inArray(arr[I]) then
      result.append(arr[I]);
end;

function TExtendedArray.include(const arr : TExtendedArray): TExtendedArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.inArray(arr[I]) then
      result.append(arr[I]);
end;

function TPointArray.include(const arr : TPointArray): TPointArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.inArray(arr[I]) then
      result.append(arr[I]);
end;

function TBoxArray.include(const arr : TBoxArray): TBoxArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if self.inArray(arr[I]) then
      result.append(arr[I]);
end;


(*
array.exclude
~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.exclude(const arr : TStringArray): TStringArray;
    function TIntegerArray.exclude(const arr : TIntegerArray): TIntegerArray;
    function TExtendedArray.exclude(const arr : TExtendedArray): TExtendedArray;
    function TPointArray.exclude(const arr : TPointArray): TPointArray;
    function TBoxArray.exclude(const arr : TBoxArray): TBoxArray;

Returns an array which contains elements that are not present in both arrays.

Example:

.. code-block:: pascal

    A := A2.exclude(A);

*)
function TStringArray.exclude(const arr : TStringArray) : TStringArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.inArray(arr[I]) then
      result.append(arr[I]);
end;

function TIntegerArray.exclude(const arr : TIntegerArray): TIntegerArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.inArray(arr[I]) then
      result.append(arr[I]);
end;

function TExtendedArray.exclude(const arr : TExtendedArray): TExtendedArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.inArray(arr[I]) then
      result.append(arr[I]);
end;

function TPointArray.exclude(const arr : TPointArray): TPointArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.inArray(arr[I]) then
      result.append(arr[I]);
end;

function TBoxArray.exclude(const arr : TBoxArray): TBoxArray;
var
  I : Integer;
begin
  for I := 0 to high(arr) do
    if not self.inArray(arr[I]) then
      result.append(arr[I]);
end;

(*
array.swap
~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.swap(var arr : TStringArray): TStringArray;
    function TIntegerArray.swap(var arr : TIntegerArray): TIntegerArray;
    function TExtendedArray.swap(var arr : TExtendedArray): TExtendedArray;
    function TPointArray.swap(var arr : TPointArray): TPointArray;
    function TBoxArray.swap(var arr : TBoxArray): TBoxArray;

Used to swap two arrays.

Example:

.. code-block:: pascal

    A.swap(A2);

*)
procedure TStringArray.swap(var arr : TStringArray);
var
  tmp := self;
begin
  self := arr;
  arr := tmp;
end;

function TIntegerArray.swap(var arr : TIntegerArray): TIntegerArray;
var
  tmp := self;
begin
  self := arr;
  arr := tmp;
end;

function TExtendedArray.swap(var arr : TExtendedArray): TExtendedArray;
var
  tmp := self;
begin
  self := arr;
  arr := tmp;
end;

function TPointArray.swap(var arr : TPointArray): TPointArray;
var
  tmp := self;
begin
  self := arr;
  arr := tmp;
end;

function TBoxArray.swap(var arr : TBoxArray): TBoxArray;
var
  tmp := self;
begin
  self := arr;
  arr := tmp;
end;


(*
array.clearEquals
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.clearEquals(const clearSelf : Boolean = True): TStringArray;
    function TIntegerArray.clearEquals(const clearSelf : Boolean = True): TIntegerArray;
    function TExtendedArray.clearEquals(const clearSelf : Boolean = True): TExtendedArray;
    function TPointArray.clearEquals(const clearSelf : Boolean = True): TPointArray;
    function TBoxArray.clearEquals(const clearSelf : Boolean = True): TBoxArray;

Used to clear duplicates in an array.

Will only result the cleared array if clearSelf is False.

Example:

.. code-block:: pascal

    A.clearEquals();
    cleared := A.clearEquals(False);

*)
function TStringArray.clearEquals(clearSelf : Boolean = True): TStringArray;
var
  I : Integer;
begin
  for I := 0 to high(self) do
    if not result.inArray(self[I]) then
      result.append(self[I]);
  if clearSelf then
    self := result;
end;

function TIntegerArray.clearEquals(const clearSelf : Boolean = True): TIntegerArray;
var
  I : Integer;
begin
  for I := 0 to high(self) do
    if not result.inArray(self[I]) then
      result.append(self[I]);
  if clearSelf then
    self := result;
end;

function TExtendedArray.clearEquals(const clearSelf : Boolean = True): TExtendedArray;
var
  I : Integer;
begin
  for I := 0 to high(self) do
    if not result.inArray(self[I]) then
      result.append(self[I]);
  if clearSelf then
    self := result;
end;

function TPointArray.clearEquals(const clearSelf : Boolean = True): TPointArray;
begin
  result := copy(self);
  clearDoubleTPA(result);
  if clearSelf then
    self := result;
end;

function TBoxArray.clearEquals(const clearSelf : Boolean = True): TBoxArray;
var
  I : Integer;
begin
  for I := 0 to high(self) do
    if not result.inArray(self[I]) then
      result.append(self[I]);
  if clearSelf then
    self := result;
end;


(*
array.invert
~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.invert(const invertSelf : Boolean = True): TStringArray;
    function TIntegerArray.invert(const invertSelf : Boolean = True): TIntegerArray;
    function TExtendedArray.invert(const invertSelf : Boolean = True): TExtendedArray;
    function TPointArray.invert(const invertSelf : Boolean = True): TPointArray;
    function TBoxArray.invert(const invertSelf : Boolean = True): TBoxArray;

Used to invert an array.

Will only result the invert array if invertSelf is False.

Example:

.. code-block:: pascal

    A.invert();
    cleared := A.invert(False);

*)
function TStringArray.invert(const invertSelf : Boolean = True): TStringArray;
var
  I : Integer;
begin
  for I := high(self) downto 0 do
    result.append(self[I]);
  if invertSelf then
    self := result;
end;

function TIntegerArray.invert(const invertSelf : Boolean = True): TIntegerArray;
var
  I : Integer;
begin
  result := copy(self);
  invertTIA(result);
  if invertSelf then
    self := result;
end;

function TExtendedArray.invert(const invertSelf : Boolean = True): TExtendedArray;
var
  I : Integer;
begin
  for I := high(self) downto 0 do
    result.append(self[I]);
  if invertSelf then
    self := result;
end;

function TPointArray.invert(const invertSelf : Boolean = True): TPointArray;
var
  I : Integer;
begin
  result := copy(self);
  invertTPA(result);
  if invertSelf then
    self := result;
end;

function TBoxArray.invert(const invertSelf : Boolean = True): TBoxArray;
var
  I : Integer;
begin
  for I := high(self) downto 0 do
    result.append(self[I]);
  if invertSelf then
    self := result;
end;

// TODO: Remove: Deprecated.
procedure TStringArray.addIndex(const str : String; const index : Integer = 0); begin insert(str, self, index); end;
procedure TIntegerArray.addIndex(const int : Integer; const index : Integer = 0); begin insert(int, self, index); end;
procedure TExtendedArray.addIndex(const ext : Extended; const index : Integer = 0); begin insert(ext, self, index); end;
procedure TPointArray.addIndex(const p : TPoint; const index : Integer = 0); begin insert(p, self, index); end;
procedure TBoxArray.addIndex(const box : TBox; const index : Integer = 0); begin insert(box, self, index); end;
procedure TStringArray.deleteIndex(const index : Integer); begin delete(self, index); end;
procedure TIntegerArray.deleteIndex(const index : Integer); begin delete(self, index); end;
procedure TExtendedArray.deleteIndex(const index : Integer); begin delete(self, index); end;
procedure TPointArray.deleteIndex(const index : Integer); begin delete(self, index); end;
procedure TBoxArray.deleteIndex(const index : Integer); begin delete(self, index); end;
procedure TStringArray.combine(const arr : TStringArray); begin self.merge(arr); end;
procedure TIntegerArray.combine(const arr : TIntegerArray); begin self.merge(arr); end;
procedure TExtendedArray.combine(const arr : TExtendedArray); begin self.merge(arr); end;
procedure TPointArray.combine(const arr : TPointArray); begin self.merge(arr); end;
procedure TBoxArray.combine(const arr : TBoxArray); begin self.merge(arr); end;
function TStringArray.returnInArray(const str : String) : Integer; begin result := self.element(str); end;
function TIntegerArray.returnInArray(const int : Integer) : Integer; begin result := self.element(int); end;
function TExtendedArray.returnInArray(const ext : Extended) : Integer; begin result := self.element(ext); end;
function TPointArray.returnPosInArray(const p : TPoint) : Integer; begin result := self.element(p); end;
function TBoxArray.returnInArray(const box : TBox) : Integer; begin result := self.element(box); end;
function TStringArray.isInArray(const str : String) : Boolean; begin result := self.inArray(str); end;
function TIntegerArray.isInArray(const int : Integer) : Boolean; begin result := self.inArray(int); end;
function TExtendedArray.isInArray(const ext : Extended) : Boolean; begin result := self.inArray(ext); end;
function TPointArray.isInArray(const p : TPoint) : Boolean; begin result := self.inArray(p); end;
function TBoxArray.isInArray(const box : TBox) : Boolean; begin result := self.inArray(box); end;
