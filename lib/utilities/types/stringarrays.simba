(*
String Arrays
=============

A file that stores type functions to manipulate TStringArrays.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/utilities/types/stringarrays.simba>`_.

Contributers:
  - Zyt3x

*)

{$f-}

(*
TStringArray.explodeArr
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.explodeArr(const delArr : TStringArray): T2DStringArray;

Used to explode the TStringArray using different del strings.
  Requires the length of delArr to be the same as the length of the string array.

.. note::

    Rename this to "TStringArray.explode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    s2DArr := sArr.explodeArr(['divider1', ...]);

*)
function TStringArray.explodeArr(const delArr : TStringArray): T2DStringArray;
var
  I : Integer;
begin
  if not length(delArr) <> length(self) then
  begin
    WriteLn('ERROR: explodeArr: delArr length not equal to array length.');
    Exit;
  end;

  setLength(result, length(self));
  for I := 0 to high(self) do
    result[I] := explode(delArr[I], self[I]);
end;

(*
TStringArray.explodeArr: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.explodeArr(const del : String): T2DStringArray; overload;

Used to explode the TStringArray.  Uses a string instead of an array of strings.

.. note::

    Rename this to "TStringArray.explode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    s2DArr := sArr.explodeArr('divider');

*)
function TStringArray.explodeArr(const del : String): T2DStringArray; overload;
var
  delArr : TStringArray;
  I : Integer;
begin
  setLength(delArr, length(self));
  for I := 0 to high(delArr) do
    delArr[I] := del;

  result := self.explodeArr(delArr);
end;

(*
TStringArray.implodeArr
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.implodeArr(const glue : String): String;

Used to implode the TStringArray.

.. note::

    Rename this to "TStringArray.implode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    S := sArr.implodeArr('glue');

*)
function TStringArray.implodeArr(const glue : String): String;
begin
  result := implode(glue, self);
end;

(*
TStringArray.toLowerCase
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.toLowerCase();

Used to lowercase a TStringArray.

Example:

.. code-block:: pascal

    TSA.toLowerCase();

*)
procedure TStringArray.toLowerCase();
var
  I : Integer;
begin
  for I := 0 to high(self) do
    self[I] := lowerCase(self[I]);
end;

(*
TStringArray.toUpperCase
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.toUpperCase();

Used to uppercase a TStringArray.

Example:

.. code-block:: pascal

    TSA.toUpperCase();

*)
procedure TStringArray.toUpperCase();
var
  I : Integer;
begin
  for I := 0 to high(self) do
    self[I] := upperCase(self[I]);
end;

(*
TStringArray.toCapitalize
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TStringArray.toCapitalize();

Used to capitalize a TStringArray.

Example:

.. code-block:: pascal

    TSA.toCapitalize();

*)
procedure TStringArray.toCapitalize();
var
  I : Integer;
begin
  for I := 0 to high(self) do
    self[I] := capitalize(self[I]);
end;

(*
TStringArray.toString
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.toString() : String;

Used to turn a TStringArray into a string.

Example:

.. code-block:: pascal

    writeLn(TSA.toString());

*)
function TStringArray.toString() : String;
begin
  result := self.implodeArr('');
end;

(*
TStringArray.toCharArray
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TStringArray.toCharArray() : String;

Used to turn a TStringArray into a TCharArray.

Example:

.. code-block:: pascal

    TCA := TSA.toCharArray();

*)
function TStringArray.toCharArray() : TCharArray;
var
  I : Integer;
begin
  setLength(result, length(self));
  for I := 0 to high(self) do
    result[I] := Char(self[I][1]);
end;

(*
T2DStringArray.implodeArr
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DStringArray.implodeArr(const glueArr : TStringArray): TStringArray;

Used to implode the T2DStringArray.
  Requires the length of glueArr to be the same as the length of the string array.

.. note::

    Rename this to "T2DStringArray.implode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    sArr := s2DArr.implodeArr(['glue1', ...]);

*)
function T2DStringArray.implodeArr(const glueArr : TStringArray): TStringArray;
var
  I : Integer;
begin
  if not length(glueArr) <> length(self) then
  begin
    WriteLn('ERROR: implodeArr: glueArr length not equal to array length.');
    Exit;
  end;

  setLength(result, length(self));
  for I := 0 to high(self) do
    result[I] := self[I].implodeArr(glueArr[I]);
end;

(*
T2DStringArray.implodeArr: overload;
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function T2DStringArray.implodeArr(const glue : String): TStringArray; overload;

Used to implode the T2DStringArray using glue strings.  Uses a string instead of an array of strings.

.. note::

    Rename this to "T2DStringArray.implode" once lape requires "self" for internal things.

Example:

.. code-block:: pascal

    sArr := s2DArr.implodeArr('glue']);

*)
function T2DStringArray.implodeArr(const glue : String): TStringArray; overload;
var
  glueArr : TStringArray;
  I : Integer;
begin
  setLength(glueArr, length(self));
  for I := 0 to high(glueArr) do
    glueArr[I] := glue;

  result := self.implodeArr(glueArr);
end;

{$f+}
