(*
Color
=====

The color type holds all the functions and types that can be used for easy color
finding, comparing or manupilation.

*)

{$f-}

(*
type TColorSettings
~~~~~~~~~~~~~~~~~~~

A record that provides easy access to the Simba CTS settings.
*)
type
  TColorSettings = record
    CTS: Integer;
    modifier: record
      hue, saturation, sensitivity: Extended;
    end;
  end;

(*
colorSetting
~~~~~~~~~~~~

.. code-block:: pascal

    function colorSetting(_CTS:Integer): TColorSettings;

Creates and returns a colorSetting record with the given CTS method.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findColorTolerance(x, y, $FF0000, MSX1, MSY1, MSX2, MSY2, 10, colorSetting(0))) then
*)
function colorSetting(_CTS:Integer): TColorSettings;
var
  cs: TColorSettings;
begin
  cs.CTS := _CTS;
  Result := cs;
end;

(*
colorSetting
~~~~~~~~~~~~

.. code-block:: pascal

    function colorSetting(_CTS:Integer): TColorSettings;

Creates and returns a colorSetting record with the given CTS method and the CTS 2 modifiers.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findColorTolerance(x, y, $DACE11, MSX1, MSY1, MSX2, MSY2, 10, colorSetting(2, 0.20, 0.80))) then
*)
function colorSetting(_CTS:Integer;  _hueModifier, _saturationModifier: Extended): TColorSettings; overload;
var
  cs: TColorSettings;
begin
  cs.toColorSettings(_CTS, _hueModifier, _saturationModifier);
  Result := cs;
end;

(*
colorSetting
~~~~~~~~~~~~

.. code-block:: pascal

    function colorSetting(_CTS:Integer): TColorSettings;

Creates and returns a colorSetting record with the given CTS method and the CTS 3 modifier.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findColorTolerance(x, y, $DACE11, MSX1, MSY1, MSX2, MSY2, 10, colorSetting(2, 10))) then
*)
function colorSetting(_CTS:Integer; _sensitivityModifier: Extended): TColorSettings; overload;
var
  cs: TColorSettings;
begin
  cs.toColorSettings(_CTS, _sensitivityModifier);
  Result := cs;
end;

(*
TColorSettings.toColorSettings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TColorSettings.toColorSettings(_CTS: Integer; _hueModifier, _saturationModifier: Extended);

Creates and colorSetting record with the given CTS method and the CTS 2 modifiers.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.toColorSettings(2, 0.45. 0.90);
    if(findColorTolerance(x, y, $DACE11, MSX1, MSY1, MSX2, MSY2, 10, goblinCS)) then
*)
procedure TColorSettings.toColorSettings(_CTS: Integer; _hueModifier, _saturationModifier: Extended);
begin
  Self.CTS := _CTS;
  Self.modifier.hue := _hueModifier;
  Self.modifier.saturation := _saturationModifier;
end;

(*
TColorSettings.toColorSettings
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TColorSettings.toColorSettings(_CTS: Integer; _sensitivityModifier: Extended);

Creates and ColorSetting record with the given CTS method and the CTS 3 modifier.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    chickenCS.toColorSettings(3, 20);
    if(findColorTolerance(x, y, $FFFFFF, MSX1, MSY1, MSX2, MSY2, 15, chickenCS)) then
*)
procedure TColorSettings.toColorSettings(_CTS: Integer; _sensitivityModifier: Extended); overload;
begin
  Self.CTS := _CTS;
  Self.modifier.sensitivity := _sensitivityModifier;
end;

(*
TColorSettings.retrieve
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TColorSettings.retrieve();

Gets the current CTS settings used by simba, and stores them into the record.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    restoreCS.retrieve();
    SetColorToleranceSpeed(5);
    a := findColorTolerance(x, y, 5811341, MSX1, MSY1, MSX2, MSY2, 10);
    restoreCS.apply();
*)
procedure TColorSettings.retrieve();
begin
  Self.CTS := GetToleranceSpeed();
  Self.modifier.sensitivity := GetToleranceSpeed3Modifier();
  GetToleranceSpeed2Modifiers(Self.modifier.hue, Self.modifier.saturation);
end;

(*
TColorSettings.retrieve
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TColorSettings.apply();

Applies the CTS settings from the record to the simba client.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if(findColorTolerance(x, y, 5811341, MSX1, MSY1, MSX2, MSY2, 10))then
*)
procedure TColorSettings.apply();
begin
  SetColorToleranceSpeed(Self.CTS);
  SetToleranceSpeed2Modifiers(Self.modifier.hue, Self.modifier.saturation);
  SetToleranceSpeed3Modifier(Self.modifier.sensitivity);
end;

(*
findColorTolerance
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorTolerance(var x, y: Integer; color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if(findColorTolerance(x, y, 5811341, MSX1, MSY1, MSX2, MSY2, 10))then
*)
function findColorTolerance(var x, y: Integer; color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve;
  settings.apply();
  Result := findColorTolerance(x, y, color, XS, YS, XE, YE, tol);
  cs.apply();
end;

(*
findColorsTolerance
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorsTolerance(var points: TPointArray; color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean;
Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if(findColorsTolerance(tpa, 5811341, MSX1, MSY1, MSX2, MSY2, 10))then
*)
function findColorsTolerance(var points: TPointArray; color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findColorsTolerance(points, color, XS, YS, XE, YE, tol);
  cs.apply();
end;

(*
findColorSpiralTolerance
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorSpiralTolerance(var x, y: Integer; color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if(findColorSpiralTolerance(x, y, 5811341, MSX1, MSY1, MSX2, MSY2, 10))then
*)
function findColorSpiralTolerance(var x, y: Integer; color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findColorSpiralTolerance(x, y, color, XS, YS, XE, YE, tol);
  cs.apply();
end;

(*
findColorsSpiralTolerance
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColorsSpiralTolerance(x, y: Integer; var points: TPointArray; color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if(findColorsSpiralTolerance(x, y, tpa, 5811341, MSX1, MSY1, MSX2, MSY2, 10)) then
*)
function findColorsSpiralTolerance(x, y: Integer; var points: TPointArray; color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findColorsSpiralTolerance(x, y, points, color, XS, YS, XE, YE, tol);
  cs.apply();
end;

(*
findColoredAreaTolerance
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColoredAreaTolerance(var x, y: Integer; color, XS, YS, XE, YE, minArea, tol: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    goblinCS.apply();
    if(findColoredAreaTolerance(x, y, 5811341, MSX1, MSY1, MSX2, MSY2, 22, 10)) then
*)
function findColoredAreaTolerance(var x, y: Integer; color, XS, YS, XE, YE, minArea, tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findColoredAreaTolerance(x, y, color, XS, YS, XE, YE, minArea, tol);
  cs.apply();
end;

(*
findColoredAreaTolerance
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findColoredAreaTolerance(var x, y: Integer; color, XS, YS, XE, YE, minArea, tol: Integer; settings: TColorSettings): Boolean;

Calls the simba compare function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(similarColors($CECECE, $CFCFCF, 2, CreateCS(1))) then
*)
function similarColors(col1, col2, tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := similarColors(col1, col2, tol);
  cs.apply();
end;

(*
countColorTolerance
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function countColorTolerance(color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Integer;

Calls the simba count function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(countColorTolerance(color, XS, YS, XE, YE, minArea, tol, demonCS) > 20) then
*)
function countColorTolerance(color, XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Integer; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := countColorTolerance(color, XS, YS, XE, YE, tol);
  cs.apply();
end;

(*
findBitmapToleranceIn
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapToleranceIn(bitmap: Integer; var x, y: Integer; XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(countColorTolerance(AttackPotionBmp, x, y, XS, YS, XE, YE, tol, invCS)) then
*)
function findBitmapToleranceIn(bitmap: Integer; var x, y: Integer; XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findBitmapToleranceIn(bitmap, x, y, XS, YS, XE, YE, tol);
  cs.apply();
end;

(*
findBitmapSpiralTolerance
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapSpiralTolerance(bitmap: Integer; var x, y: Integer; XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findBitmapSpiralTolerance(AttackPotionBmp, x, y, XS, YS, XE, YE, 15, invCS)) then
*)
function findBitmapSpiralTolerance(bitmap: Integer; var x, y: Integer; XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
   cs.retrieve();
  settings.apply();
  Result := findBitmapSpiralTolerance(bitmap, x, y, XS, YS, XE, YE, tol);
  cs.apply();
end;

(*
findBitmapsSpiralTolerance
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapsSpiralTolerance(bitmap: Integer; x, y: Integer; var points: TPointArray; XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findBitmapsSpiralTolerance(AttackPotionBmp, x, y, tpa, XS, YS, XE, YE, 15, invCS)) then
*)
function findBitmapsSpiralTolerance(bitmap: Integer; x, y: Integer; var points: TPointArray; XS, YS, XE, YE, tol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findBitmapsSpiralTolerance(bitmap, x, y, points, XS, YS, XE, YE, tol);
  cs.apply();
end;

(*
findBitmapMaskTolerance
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findBitmapMaskTolerance(mask: Integer; var x, y: Integer; XS, YS, XE, YE, tol, contourTol: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findBitmapMaskTolerance(mazeMask, x, y, tpa, XS, YS, XE, YE, 15, 20, mmCS)) then
*)
function findBitmapMaskTolerance(mask: Integer; var x, y: Integer; XS, YS, XE, YE, tol, contourTol: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findBitmapMaskTolerance(mask, x, y, XS, YS, XE, YE, tol, contourTol);
  cs.apply();
end;

(*
findDeformedBitmapToleranceIn
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDeformedBitmapToleranceIn(bitmap: Integer; var x, y: Integer; XS, YS, XE, YE, tol, range: Integer; allowPartialAccuracy: Boolean; var accuracy: Extended; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 20, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findDeformedBitmapToleranceIn(mazeMask, x, y, tpa, XS, YS, XE, YE, 15, 20, True, 0.40, mmCS)) then
*)
function findDeformedBitmapToleranceIn(bitmap: Integer; var x, y: Integer; XS, YS, XE, YE, tol, range: Integer; allowPartialAccuracy: Boolean; var accuracy: Extended; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findDeformedBitmapToleranceIn(bitmap, x, y, XS, YS, XE, YE, tol, range, allowPartialAccuracy, accuracy);
  cs.apply();
end;

(*
findDTM
~~~~~~~

.. code-block:: pascal

    function findDTM(DTM: Integer; var x, y: Integer; XS, YS, XE, YE: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 24, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findDTM(bonesDtm, x, y, XS, YS, XE, YE, invCS)) then
*)
function findDTM(DTM: Integer; var x, y: Integer; XS, YS, XE, YE: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findDTM(DTM, x, y, XS, YS, XE, YE);
  cs.apply();
end;

(*
findDTMs
~~~~~~~~

.. code-block:: pascal

    function findDTMs(DTM: Integer; var points: TPointArray; XS, YS, XE, YE: Integer; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 24, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findDTMs(bonesDtm, points, XS, YS, XE, YE, invCS)) then
*)
function findDTMs(DTM: Integer; var points: TPointArray; XS, YS, XE, YE: Integer; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findDTMs(DTM, points, XS, YS, XE, YE);
  cs.apply();
end;

(*
findDTMRotatedSE
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDTMRotatedSE(DTM: Integer; var x, y: Integer; XS, YS, XE, YE: Integer; sAngle, eAngle, aStep: Extended; var aFound: Extended; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 24, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findDTMRotatedSE(bankersDtm, points, XS, YS, XE, YE, 0, 360, 2, angle, CreateCS(2, 0.80, 0.20))) then
*)
function findDTMRotatedSE(DTM: Integer; var x, y: Integer; XS, YS, XE, YE: Integer; sAngle, eAngle, aStep: Extended; var aFound: Extended; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findDTMRotatedSE(DTM, x, y, XS, YS, XE, YE, sAngle, eAngle, aStep, aFound);
  cs.apply();
end;

(*
findDTMRotatedAlternating
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDTMRotatedAlternating(DTM: Integer; var x, y: Integer; XS, YS, XE, YE: Integer; sAngle, eAngle, aStep: Extended; var aFound: Extended; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 24, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findDTMRotatedAlternating(bankersDtm, x, y, XS, YS, XE, YE, 0, 360, 2, angle, CreateCS(2, 0.80, 0.20))) then
*)
function findDTMRotatedAlternating(DTM: Integer; var x, y: Integer; XS, YS, XE, YE: Integer; sAngle, eAngle, aStep: Extended; var aFound: Extended; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findDTMRotatedAlternating(DTM, x, y, XS, YS, XE, YE, sAngle, eAngle, aStep, aFound);
  cs.apply();
end;

(*
findDTMsRotatedSE
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDTMsRotatedSE(DTM: Integer; var points: TPointArray; XS, YS, XE, YE: Integer; sAngle, eAngle, aStep: Extended; var aFound: T2DExtendedArray; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 24, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findDTMsRotatedSE(bankersDtm, points, XS, YS, XE, YE, 0, 360, 2, angles, CreateCS(2, 0.80, 0.20))) then
*)
function findDTMsRotatedSE(DTM: Integer; var points: TPointArray; XS, YS, XE, YE: Integer; sAngle, eAngle, aStep: Extended; var aFound: T2DExtendedArray; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findDTMsRotatedSE(DTM, points, XS, YS, XE, YE, sAngle, eAngle, aStep, aFound);
  cs.apply();
end;

(*
findDTMsRotatedAlternating
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findDTMsRotatedAlternating(DTM: Integer; var points: TPointArray; XS, YS, XE, YE: Integer; sAngle, eAngle, aStep: Extended; var aFound: T2DExtendedArray; settings: TColorSettings): Boolean;

Calls the simba find function with an additional color settings parameter. Sets and restores the CTS settings.

.. note::

    by Janilabo
    Last Updated: Apr. 24, 2013 by Janilabo

Example:

.. code-block:: pascal

    if(findDTMsRotatedAlternating(bankersDtm, points, XS, YS, XE, YE, 0, 360, 2, angles, CreateCS(2, 0.80, 0.20))) then
*)
function findDTMsRotatedAlternating(DTM: Integer; var points: TPointArray; XS, YS, XE, YE: Integer; sAngle, eAngle, aStep: Extended; var aFound: T2DExtendedArray; settings: TColorSettings): Boolean; overload;
var
  cs: TColorSettings;
begin
  cs.retrieve();
  settings.apply();
  Result := findDTMsRotatedAlternating(DTM, points, XS, YS, XE, YE, sAngle, eAngle, aStep, aFound);
  cs.apply();
end;
