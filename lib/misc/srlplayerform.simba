(*
SRL Player Form
===============

The SRL Player Form is an optional script feature.  It allows scripters to
integrate a user interface into their scripts, making it easier for their users
to setup the script.

For a tutorial on how to add the SRL player form to any script, see
`this <http://villavu.com/forum/showthread.php?t=107572>`_ thread.

The source for this file can be found
`here <https://github.com/SRL/SRL-6/blob/master/lib/misc/srlplayerform.simba>`_.

*)

{$include_once srl-6/lib/core/globals.simba}
{$include_once srl-6/lib/core/debug.simba}
{$include_once srl-6/lib/core/players.simba}

{$f+} // On since "native" reqiures it.

{$IFNDEF CODEINSIGHT}
const
  BTN_BMP_TICK = 0;
  BTN_BMP_CROSS = 1;
{$ENDIF}

{*
type __TFormPlayer
~~~~~~~~~~~~~~~~~~

Stores temporary information for each player.
*}
type
  __TFormPlayer = record
    name: string;
    settings: TStringArray;
  end;

(*
type TPlayerForm
~~~~~~~~~~~~~~~~

Stores all information pertaining to a TPlayerForm.  View the source file for
a full list of customizable options.
*)
type
  TPlayerForm = record
    // static form components
    mainForm: TForm;
    groupBox: TGroupBox;
    editArmyName: TEdit;
    btnLoadArmy, btnStartScript: TSpeedButton;
    clbPlayers: TCheckListBox;
    btnStart: TButton;

    name: string; // the title for the main window
    scriptHelpThread: string;
    scriptSettingsPath: string;
    editBoxLabels, editBoxDefaults: TStringArray;
    checkBoxLabels, checkBoxDefaults: TStringArray;
    comboBoxLabels, comboBoxDefaults: TStringArray;
    comboBoxItems: array of TStringArray;
    playerFile: string;
    playerNames: TStringArray;
    players: array of __TFormPlayer;
    isScriptReady: boolean;
    __bmps: array [0..1] of TBitmap; // bitmaps used for speed buttons
    __loadedArmy, selectedPlayers: TPlayerArray; // player array of the loaded army
  end;

(*
var playerForm
~~~~~~~~~~~~~~

The variable used by scripters to enable the SRL Player Form.

Example:

.. code-block:: pascal

    playerForm.scriptSettingsPath := 'C:/settings.txt';
*)
var
  playerForm: TPlayerForm;

{*
var Internal
~~~~~~~~~~~~

All internal vairables.  Most are form components.  You should never edit these
unless you know exactly what you're doing.
*}
{$IFNDEF CODEINSIGHT}
var
  __scriptEditBoxes: array of TEdit;
  __scriptEditLabels: array of TLabel;
  __scriptCheckBoxes: array of TCheckBox;
  __scriptCheckLabels: array of TLabel;
  __scriptComboBoxes: array of TComboBox;
  __scriptComboLabels: array of TLabel;
  __btnHelp: TButton;
  __btnSave: TButton;
  __memo: TMemo;
  __tslSettings: TStringList;
{$ENDIF}


{loads all bitmaps needed for the playerform}
{$IFNDEF CODEINSIGHT}
procedure __TPlayerForm_LoadBitmaps();
const
  strings: TStringArray
var
  i: byte;
begin
  for i := 0 to high(playerForm.__bmps) do
  with (playerForm.__bmps[i]) do
    begin
      init();
      loadFromString(18, 17, 0, strings[i]);
    end;
end;
{$ENDIF}

{frees all bitmaps used by the playerform}
{$IFNDEF CODEINSIGHT}
procedure __TPlayerForm_FreeBitmaps();
var
  i: byte;
begin
  for i := 0 to high(playerForm.__bmps) do
    playerForm.__bmps[i].free();
end;
{$ENDIF}

{$IFNDEF CODEINSIGHT}
procedure __TPlayerForm_LoadArmy(const armyName: string);
var
  j, i: integer;
  a: TIntegerArray;
begin
  with (playerForm) do
  begin
    setLength(__loadedArmy, 0); // clear old data
    clbPlayers.clear();

    if (Rafiki_FindArmy(armyName)) then
      Rafiki_GetPlayersFromArmy(armyName, __loadedArmy);

    if (length(__loadedArmy) = 0) then
    begin
      SafeMessageDlg('RawPlayerForm', format('Army "%s" doesn''t exist, make sure you''ve saved a army in the player manager (SRL > Run Player Manager)', [armyName]), mtWarning, [mbOk]);
      exit();
    end;

    for j := 0 to high(__loadedArmy) do
    begin
      clbPlayers.getItems().add(__loadedArmy[i].logInName + '  ('+__loadedArmy[i].nickName+')');
      for i := 0 to (clbPlayers.getItems().getCount() - 1) do
        insert(clbPlayers.getCanvas().TextWidth(clbPlayers.getItems().getStrings(i)), a);

      clbPlayers.setScrollWidth(MaxA(a) + 25);
    end;
  end;
end;
{$ENDIF}

{$IFNDEF CODEINSIGHT}
procedure __TPlayerForm_OnNotifyEvent(Sender: TObject); native;

  function removeNick(const str: string): string;
  var
    p: integer;
  begin
    result := str;

    try
      p := Pos(' (', result);
      if (p > 0) then
        result := copy(result, 0, p);
    finally
      trim(result);
    end;
  end;

var
  i, j: integer;
  s: string;
begin
  with (playerForm) do
    case (Sender) of
      btnLoadArmy: __TPlayerForm_LoadArmy(editArmyName.getCaption());
      btnStart:
        begin
          isScriptReady := true;

          for i := 0 to (clbPlayers.getItems().getCount() -1) do
          begin
            s := removeNick(clbPlayers.getItems().getStrings(i));
            for j := 0 to high(__loadedArmy) do
              if (__loadedArmy[i].loginName = s) then
              begin
                setLength(selectedPlayers, length(selectedPlayers) + 1);
                with selectedPlayers[i] do
                begin
                  loginName := __loadedArmy[i].loginName;
                  passWord := __loadedArmy[i].password;
                  nickname := __loadedArmy[i].nickName;
                  bankPin := __loadedArmy[i].bankPin;
                  isMember := __loadedArmy[i].isMember;
                end;
              end;
          end;
          mainForm.close();
        end;
  end;
end;
{$ENDIF}

{$IFNDEF CODEINSIGHT}
procedure __TRawPlayerForm_CheckArmyExists(Sender: TObject); native;
begin
  with (PlayerForm) do
    case (Rafiki_FindArmy(editArmyName.getCaption())) of
      true: btnLoadArmy.setGlyph(__bmps[BTN_BMP_TICK]);
      false: btnLoadArmy.setGlyph(__bmps[BTN_BMP_CROSS]);
    end;
end;
{$ENDIF}

{*
__writeln
~~~~~~~~~

.. code-block:: pascal

    procedure __writeln(s: string);

Used to print debug in the form's debug box.  Needed because forms are separate
from Simba and "writeln" doesn't print to Simba's debug box.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

Example:

.. code-block:: pascal

    __writeln('Some debug here');
*}
procedure __writeln(s: string);
begin
  __memo.getLines().add(s);
end;

{*
__getDefaultSettings
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __getDefaultSettings(): TStringArray;

Returns all the player form's default settings in one array.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
function __getDefaultSettings(): TStringArray;
var
  i: integer;
begin
  if (length(playerForm.editBoxDefaults) > 0) then
    for i := 0 to high(playerForm.editBoxDefaults) do
    begin
      setLength(result, length(result) + 1);
      result[high(result)] := playerForm.editBoxDefaults[i];
    end;

  if (length(playerForm.checkBoxDefaults) > 0) then
    for i := 0 to high(playerForm.checkBoxDefaults) do
    begin
      setLength(result, length(result) + 1);
      result[high(result)] := playerForm.checkBoxDefaults[i];
    end;

  if (length(playerForm.comboBoxDefaults) > 0) then
    for i := 0 to high(playerForm.comboBoxDefaults) do
    begin
      setLength(result, length(result) + 1);
      result[high(result)] := playerForm.comboBoxDefaults[i];
    end;
end;

{*
__loadPlayerFiles
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __loadPlayerFiles();

Loadsd all the user's player files into the "Player File" combo box.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
procedure __loadPlayerFiles();
var
  s: TStringArray;
  i: integer;
begin
  s := getFiles(__PATH_PLAYER, 'xml');
  {
  for i := 0 to high(s) do
  begin
    if (s[i] = 'settings.xml') then
      continue;

    __cboPlayerFile.addItem(s[i], nil);
  end;

  s := getFiles(__PATH_PLAYER, 'raf');

  for i := 0 to high(s) do
    __cboPlayerFile.addItem(s[i], nil);  }
end;

{*
__componentSettings
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __componentSettings(): TStringArray;

Gets all the settings from the form components and returns them in a
TStringArray.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
function __componentSettings(): TStringArray;
var
  i: integer;
begin
  if (length(__scriptEditBoxes) > 0) then
    for i := 0 to high(__scriptEditBoxes) do
    begin
      setLength(result, length(result) + 1);
      result[high(result)] := __scriptEditBoxes[i].getText();
    end;

  if (length(__scriptCheckBoxes) > 0) then
    for i := 0 to high(__scriptCheckBoxes) do
    begin
      setLength(result, length(result) + 1);

      if (__scriptCheckBoxes[i].getState() = cbChecked) then
        result[high(result)] := 'True'
      else
        result[high(result)] := 'False';
    end;

  if (length(__scriptComboBoxes) > 0) then
    for i := 0 to high(__scriptComboBoxes) do
    begin
      setLength(result, length(result) + 1);
      result[high(result)] := __scriptComboBoxes[i].getText();
    end;
end;

{*
__fillPlayerInfo
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __fillPlayerInfo(settings: TStringArray);

Fills the form components with the selected player's informatin.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
procedure __fillPlayerInfo(settings: TStringArray);
var
  i, c: integer;
begin
  for i := 0 to high(__scriptEditBoxes) do
  begin
    __scriptEditBoxes[i].setCaption(settings[c]);
    inc(c);
  end;

  for i := 0 to high(__scriptCheckBoxes) do
  begin
    if (lowercase(settings[c]) = 'true') then
      __scriptCheckBoxes[i].setState(cbChecked)
    else
      __scriptCheckBoxes[i].setState(cbUnchecked);

    inc(c);
  end;

  for i := 0 to high(__scriptComboBoxes) do
  begin
    __scriptComboBoxes[i].setCaption(settings[c]);
    inc(c);
  end;
end;

{*
__showPlayerInfo
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __showPlayerInfo();

Displays the correct player information in the form's components.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
procedure __showPlayerInfo();
begin
 { if (length(playerForm.players) <= 0) then
    exit;

  if (__prevPlayerIndex <> -1) then
    playerForm.players[__prevPlayerIndex].settings := __componentSettings();

  __fillPlayerInfo(playerForm.players[__lstPlayerList.getItemIndex()].settings);
  __prevPlayerIndex := __lstPlayerList.getItemIndex(); }
end;

{*
__saveSettings
~~~~~~~~~~~~~~

.. code-block:: pascal

    function __saveSettings(): boolean;

Saves the user's settings to a text file.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
function __saveSettings(): boolean;
var
  st: TCheckBoxState;
  i, j: integer;
  tsl: TStringList;
  s: string;
begin
  {if (playerForm.scriptSettingsPath = '') then
    playerForm.scriptSettingsPath := scriptPath + 'settings.txt';

  tsl.init();

  if (__cboPlayerFile.getText() = '') then
  begin
    __writeln('ERROR: You must select a player file use!');
    exit();
  end else begin
    tsl.add(__cboPlayerFile.getText()); // player file
    playerForm.playerFile := copy(__cboPlayerFile.getText(), 0, length(__cboPlayerFile.getText()) - 4);
  end;

  // player names
  if (__lstPlayerList.getCount() <= 0) then
  begin
    __writeln('ERROR: You must add players to the list!');
    exit();
  end;

  if (__lstPlayerList.getItemIndex() <> -1) then
    playerForm.players[__lstPlayerList.getItemIndex()].settings := __componentSettings();

  // add each player and their settings to the TStringList
  for i := 0 to high(playerForm.players) do
  begin
    tsl.add(playerForm.players[i].name);

    for j := 0 to high(playerForm.players[i].settings) do
      tsl.add(playerForm.players[i].settings[j]);
  end;

  __writeln(playerForm.scriptSettingsPath);

  tsl.saveToFile(playerForm.scriptSettingsPath);
  tsl.free();

  __writeln('Successfully saved settings.');
  result := true;}
end;

{*
__loadSettings
~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __loadSettings();

Loads the user's settings from a text file.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
procedure __loadSettings();
var
  tsl: TStringList;
  startIndex, settingLength, i, j, c: integer;
begin
 { if (playerForm.scriptSettingsPath = '') then
    playerForm.scriptSettingsPath := scriptPath + 'settings.txt';

  if (not fileExists(playerForm.scriptSettingsPath)) then
    exit;

  tsl.init();
  tsl.loadFromFile(playerForm.scriptSettingsPath);

  // so we know how many elements of the tsl to go through for each player
  settingLength := (length(__scriptEditBoxes) + length(__scriptCheckBoxes) + length(__scriptComboBoxes));

  playerForm.playerFile := copy(tsl.getStrings(0), 0, length(tsl.getStrings(0)) - 4);
  __cboPlayerFile.setText(tsl.getStrings(0));

  if ((tsl.getCount() - 2) mod settingLength <> 0) then
  begin
    __writeln('Components have changed, can''t load previous settings');
    exit();
  end;

  setLength(playerForm.players, tsl.getCount()); // temporarily set the length to avoid errors
  setLength(playerForm.playerNames, length(playerForm.players));

  for i := 0 to high(playerForm.players) do
  begin
    startIndex := (1 + i * (settingLength + 1)); // get the element in the tsl that starts the next player

    if (startIndex >= (tsl.getCount() - 1)) then
      break;

    playerForm.players[i].name := tsl.getStrings(startIndex);
    __lstPlayerList.getItems().add(playerForm.players[i].name);
    __lstPlayerList.setItemIndex(i);
    playerForm.playerNames[i] := playerForm.players[i].name;

    // get all the players settings
    setLength(playerForm.players[i].settings, settingLength);
    for j := 0 to (settingLength - 1) do
      playerForm.players[i].settings[j] := tsl.getStrings(startIndex + j + 1);

    inc(c);
  end;

  setLength(playerForm.players, c); // set the real length of players
  setLength(playerForm.playerNames, c);
  tsl.free(); }
end;

{*
__createScriptComponents
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __createScriptComponents();

Creates all the form's components based on the "playerForm"'s settings.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
procedure __createScriptComponents();
  function getLongestText(const txtArr: T2DStringArray): integer;
  var a: TIntegerArray; i, j: integer;
  begin
    for i := 0 to high(txtArr) do
      for j := 0 to high(txtArr[i]) do
        insert(playerForm.mainForm.getCanvas().TextWidth(txtArr[i][j]), a);

    exit(MaxA(a));
  end;

var
  i, j, lblLeft, lblWidth, cmpLeft, cmpWidth, top, topInc: integer;
  first: boolean;
  frmWidth: TIntegerArray;
begin
  with (playerForm) do
  begin
  lblLeft := groupBox.getLeft() + groupBox.getWidth() + 14;
  cmpLeft := lblLeft + getLongestText([playerForm.editBoxLabels, playerForm.checkBoxLabels, playerForm.comboBoxLabels]) + 7;
  lblWidth := 20;
  cmpWidth := 100;
  top := 40;
  topInc := top;
  first := true;

  // TEdit boxes
  setLength(__scriptEditBoxes, length(playerForm.editBoxLabels));
  setLength(__scriptEditLabels, length(__scriptEditBoxes));
  for i := 0 to high(playerForm.editBoxLabels) do
  begin
    if (first) then
      top := 10;

    __scriptEditBoxes[i].init(mainForm);
    with __scriptEditBoxes[i] do
    begin
      setParent(mainForm);
      setLeft(cmpLeft);
      setTop(top);
      setWidth(cmpWidth);
      setCaption(playerForm.editBoxDefaults[i]);
    end;

    __scriptEditLabels[i].init(mainForm);
    with __scriptEditLabels[i] do
    begin
      setParent(mainForm);
      setTop(top + 3);
      setLeft(lblLeft);
      setWidth(lblWidth);
      setCaption(playerForm.editBoxLabels[i]);
    end;

    if (first) then
    begin
      first := false;
      topInc := topInc - 10;
    end;

    top := top + topInc;
    insert(cmpLeft + cmpWidth, frmWidth);
  end;

  // TComboBoxes
  setLength(__scriptComboBoxes, length(playerForm.comboBoxLabels));
  setLength(__scriptComboLabels, length(__scriptComboBoxes));
  for i := 0 to high(playerForm.comboBoxLabels) do
  begin
    __scriptComboBoxes[i].init(mainForm);
    with __scriptComboBoxes[i] do
    begin
      setParent(mainForm);
      setLeft(cmpLeft);
      setTop(top);
      setWidth(cmpWidth);
      setCaption(playerForm.comboBoxDefaults[i]);

      for j := 0 to high(playerForm.comboBoxItems[i]) do
        addItem(playerForm.comboBoxItems[i][j], nil);
    end;

    __scriptComboLabels[i].init(mainForm);
    with __scriptComboLabels[i] do
    begin
      setParent(mainForm);
      setTop(top + 3);
      setLeft(lblLeft);
      setWidth(lblWidth);
      setCaption(playerForm.comboBoxLabels[i]);
    end;

    insert(cmpLeft + cmpWidth, frmWidth);
    top := top + topInc;
  end;

  // TCheckBoxes
  setLength(__scriptCheckBoxes, length(playerForm.checkBoxLabels));
  setLength(__scriptCheckLabels, length(__scriptCheckBoxes));
  for i := 0 to high(playerForm.checkBoxLabels) do
  begin
    __scriptCheckBoxes[i].init(mainForm);
    with __scriptCheckBoxes[i] do
    begin
      setParent(mainForm);
      setLeft(cmpLeft);
      setTop(top + 1);
      setWidth(cmpWidth);

      if (lowercase(playerForm.checkBoxDefaults[i]) = 'true') then
       setState(cbChecked);
    end;

    __scriptCheckLabels[i].init(mainForm);
    with __scriptCheckLabels[i] do
    begin
      setParent(mainForm);
      setTop(top + 3);
      setLeft(lblLeft);
      setWidth(lblWidth);
      setCaption(playerForm.checkBoxLabels[i]);
    end;

    insert(lblLeft + 10, frmWidth);
    top := top + topInc;
  end;

  // other, non customizable components
  mainForm.setHeight(top + 5);
  mainForm.setWidth(maxA(frmWidth) + 10);
  end;
end;

{*
__onClickHelp
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __onClickHelp(sender: TObject); native;

Will open a setup tutorial when the Help button is clicked.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
procedure __onClickHelp(sender: TObject); native;
begin
  if (playerForm.scriptHelpThread = '') then
    openWebPage('http://villavu.com/forum/showthread.php?t=47714')
  else
    openWebPage(playerForm.scriptHelpThread);
end;

{*
__onClickSave
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure __onClickSave(sender: TObject); native;

What to do when the "Save" button is clicked.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
procedure __onClickSave(sender: TObject); native;
begin
  __writeln('Saving settings...');
  __saveSettings();
end;

{*
__onClickRun
~~~~~~~~~~~~

.. code-block:: pascal

    procedure __onClickRun(sender: TObject); native;

Runs the script when the "Run" button is clicked.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*}
procedure __onClickRun(sender: TObject); native;
begin
  if (__saveSettings()) then
  begin
   // __mainForm.close();
    playerForm.isScriptReady := true;
  end;
end;

(*
showForm
~~~~~~~~

.. code-block:: pascal

    procedure showForm(); native;

Shows the player form.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*)
procedure __showForm(); native;
begin
  __TPlayerForm_LoadBitmaps();

  with (playerForm) do
  begin
    mainForm.init(nil);
    with (mainForm) do
    begin
      setWidth(248);
      setHeight(249);
      setPosition(poScreenCenter);
      setShowHint(true);
      setCaption('Player Form');
      setBorderStyle(bsSingle);
    end;

    groupBox.init(mainForm);
    with (groupBox) do
    begin
      setParent(mainForm);
      setBounds(9, 4, 230, 200);
      setCaption('Players');
      setShowHint(true);
    end;

    editArmyName.init(mainForm);
    with (editArmyName) do
    begin
      setParent(groupBox);
      setBounds(6, 5, 130, 20);
      setCaption('default');
      setOnChange(__TRawPlayerForm_CheckArmyExists);
    end;

    btnLoadArmy.init(mainForm);
    with (btnLoadArmy) do
    begin
      setParent(groupBox);
      setBounds(141, 4, 80, 25);
      setCaption('Load');
      setOnClick(__TPlayerForm_OnNotifyEvent);
      setGlyph(__bmps[BTN_BMP_CROSS]);
    end;

    clbPlayers.init(groupBox);
    with (clbPlayers) do
    begin
      setParent(groupBox);
      setBounds(6, 35, 214, 140);
    end;

    btnStart.init(mainForm);
    with (btnStart) do
    begin
      setParent(mainForm);
      setBounds(8, 211, 232, 30);
      setCaption('Start Script');
      setOnClick(__TPlayerForm_OnNotifyEvent);
    end;

    if (Rafiki_FindArmy(editArmyName.getCaption())) then
    begin
      btnLoadArmy.setGlyph(__bmps[BTN_BMP_TICK]);
      __TPlayerForm_LoadArmy(editArmyName.getCaption());
    end;
  end;

  if (@SRL_Events[EVENT_PLAYERFORM_CREATE] <> nil) then
    SRL_Events[EVENT_PLAYERFORM_CREATE]();

  try
    playerForm.mainForm.showModal();
  except
    client.writeln('Error in playerform; ShowModal failed');
  finally
    if (playerForm.mainForm <> nil) then
      playerForm.mainForm.free();

    __TPlayerForm_FreeBitmaps();
  end;


  // need to be called in this order
  //__createScriptComponents();
  {__loadSettings();
  __showPlayerInfo();

  __mainForm.showModal();
  __mainForm.free();
  __tslSettings.free(); }
end;


(*
runPlayerForm
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure runPlayerForm();

The function to be called by scripters when they want to open the player form.

.. note::

    - by Coh3n
    - Last Updated: 10 January 2014 by Coh3n

*)
procedure runPlayerForm();
begin
  with (playerForm) do
    if (length(editBoxLabels) > 0) or (length(checkBoxLabels) > 0) or (length(comboBoxLabels) > 0) then
      SRL_Events[EVENT_PLAYERFORM_CREATE] := @__createScriptComponents;

  sync(__showForm);
end;
