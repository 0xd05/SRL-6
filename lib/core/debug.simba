(*
Debug
=====

The debug file holds any files used for SRL debugging and logging.

*)

{$include_once ../utilities/time.simba}
{$include_once ../utilities/wrappers.simba}

var
  debugLevel = 1; // used for the nice debug formatting
  disableSRLDebug = false;
  logPath = includePath + 'SRL-6/logs/';
  scriptStartTime = '0:0:0';
  disableSRLLog = false;

(*
openLogFile
~~~~~~~~~~~

.. code-block:: pascal

    function openLogFile(): integer;

Creates the SRL log file.

.. note::

    by Coh3n
    Last Modified: Feb. 20th, 2012 by Coh3n

Example:

.. code-block:: pascal

    openLogFile();

*)
function openLogFile(): integer;
var
  fileName: string;
begin
  if (disableSRLLog) then
    exit;

  if (not directoryExists(logPath)) then
    forceDirectories(logPath);

  // make sure it's a valid file name (Windows)
  fileName := 'SRL log ('+scriptStartTime+').txt';
  fileName := replace(fileName, '/', '-', [rfReplaceAll]);
  fileName := replace(fileName, ':', '-', [rfReplaceAll]);
  fileName := logPath + fileName;

  try
    if (fileExists(fileName)) then
      result := appendFile(fileName)
    else
      result := createFile(fileName);
  except
    writeln('Could not open log file');
  end;
end;

(*
addToLog
~~~~~~~~

.. code-block:: pascal

    procedure addToLog(s : string);

Writes the string 's' to the SRL log file.

.. note::

    by Markus
    Last Modified: Feb. 20th, 2012 by Coh3n

Example:

.. code-block:: pascal

    addToLog('Adding to SRL log file!');

*)
procedure addToLog(s: string);
var
  tmpFile: integer;
begin
  if (disableSRLLog) then
    exit;

  tmpFile := openLogFile();

  if (tmpFile >= 0) then
    try
      writeFileString(tmpFile, '['+msToTime(getTimeRunning(), TIME_BARE)+']: '+s+#13+#10);
    except
      writeln('Could not write to log file');
    finally
      closeFile(tmpFile);
    end;
end;

(*
debug
~~~~~

.. code-block:: pascal

    procedure debug(txt: string);

Prints 'txt' to the debug box in the SRL debug format.

.. note::

    by Coh3n
    Last Modified: Jan. 03th, 2013 by Zyt3x

Example:

.. code-block:: pascal

    debug(TheDate);

*)
procedure debug(txt: string);
var
  debugMSG := replicate('--', debugLevel) + ' ' + txt;
begin
  if (disableSRLdebug) then exit;
  if (not disableSRLLog) then addToLog(debugMSG);
  writeln(debugMSG)
end;

(*
addHeader
~~~~~~~~~

.. code-block:: pascal

    procedure addHeader(header: string);

Creates a new header in the debug box. Means that all following debugs will be
indented 2 spaces with respect to the header. Should be called at the beginning
of a procedure or function.

.. note::

    by Sir R. Magician

Example:

.. code-block:: pascal

  addHeader('OpenBank()');

*)
procedure addHeader(header: string);
begin
  debug(header);
  inc(debugLevel);
end;

(*
closeHeader
~~~~~~~~~~~

.. code-block:: pascal

    procedure closeHeader(closer: string);

Closes the current proceudre or function. Will print "closer" to the debug box.
This should be called at the end of a function or procedure.

.. note::

    by Sir R. Magician

Example:

.. code-block:: pascal

    closeHeader('OpenBank(): '+result);

*)
procedure closeHeader(closer: string);
begin
  Dec(debugLevel);
  debug(closer);
end;

(*
subDebug
~~~~~~~~

.. code-block:: pascal

    procedure subDebug(txt: string);

Allows a one-time-only indented debug.  Used in smaller procedures that don't
call Add/closeHeader

.. note::

    by Sir R. Magician

Example:

.. code-block:: pascal

    subDebug('BankScreen: screen not open');

*)
procedure subDebug(txt: string);
begin
  inc(debugLevel);
  debug(txt);
  dec(debugLevel);
end;

