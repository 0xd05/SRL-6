(*

coremaths.simba
===============

Math routines required by the core package.

*)

(*
BoxClosestPoint
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function BoxClosestPoint(p : TPoint; b : TBox) : TPoint;

There are 'nine' places where the point can be (relative to a box)..
The middle, 5, is the box itself.
The rest looks like this:

|    1 | 2 | 3
|    ---------
|    4 | 5 | 6
|    ---------
|    7 | 8 | 9

Place 9 means it's past the b.x2, and past the b.y2,
therefore the smallest dist between the point and the box is the
distance between the point and the box's x2,y2 coordinate.

.. note::

    by Raym0nd

Example:

.. code-block:: pascal

*)

function BoxClosestPoint(p : TPoint; b : TBox) : TPoint;
var
  column,row,place : integer;
begin
  result := Point(-1,-1);
  if p.x < B.X1 then
    Column := 1
  else if p.x > b.x2 then
    Column := 3
  else
    Column := 2;
  if p.y < b.y1 then
    row := 1
  else if p.y > b.y2 then
    row := 3
  else
    row := 2;
  place := (row-1)* 3 + column;
  case Place of
    1 : Result := Point(b.x1,b.y1);
    2 : Result := Point(p.x,b.y1);
    3 : Result := point(b.x2,b.y1);
    4 : Result := point(b.x1,p.y);
    5 : Result := p;
    6 : Result := point(b.x2,p.y);
    7 : Result := point(b.x1,b.y2);
    8 : Result := point(p.x,b.y2);
    9 : Result := point(b.x2,b.y2);
  end;
end;

(*
RandomPointBoxEx
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function RandomPointBoxEx(p : TPoint; b : TBox; extraDist : integer) : TPoint;

Returns a point in the box which is 'aimed' near the TPoint given..
Basically it only allows points that lay within the extradist from
the closest point to be returned.
Practical example:

    Inventory Box.. When your mouse is on the right of an inv item,
    you don't want to click on the left of the box.

.. note::

    by Raym0nd

Example:

.. code-block:: pascal

*)
function RandomPointBoxEx(p : TPoint; b : TBox; extraDist : integer) : TPoint;
var
  TPA : TPointArray;
  Dist : integer;
  ClosestPoint : TPoint;
begin
  if PointInBox(p,b) then
  begin
    result := p;
    exit;
  end;
  ClosestPoint := BoxClosestPoint(p,b);
  Dist := Distance(p.x,p.y,ClosestPoint.x,ClosestPoint.y);
  TPA := TPAFromBox(b);
  FilterPointsDist(TPA,0,dist+extraDist,p.x,p.y);
  if length(TPA) < 1 then
    result := point(RandomRange(b.X1,b.x2),RandomRange(b.y1,b.y2))
  else
    result := TPA[random(length(tpa))];
end;
