(*
Login
=====

The Login file holds any functions that have anything to do with logging a
player into the game.

*)

{$include_once ../interfaces/gametabs/gametab.simba}
{$include_once ../interfaces/mainscreen.simba}

const
  LOGIN_COLOR_TEXT = 12378347;

  UBOX := intToBox(279, 205, 486, 215); // username box
  PBOX := intToBox(279, 250, 486, 265); // password box

(*
isLoggedIn()
~~~~~~~~~~~~

.. code-block:: pascal

    function isLoggedIn(): boolean;

Returns true if a player is logged in.

.. note::

    by WT-Fakawi
    Last updated: 30/09/2012 by Coh3n

Example:

.. code-block:: pascal

    if (isLoggedIn()) then
      writeln('We are logged in!');
*)
function isLoggedIn(): boolean;
begin
  Result := (GetColor(478, 543) = 16777215); // white text on report abuse button
end;

{*
_logout()
~~~~~~~~~

.. code-block:: pascal

    function _logout(): boolean;

Returns true if the current player is successfully logged out.

.. note::

    by Starblaster100, Raymond, IceFire908, Tarajunky & NCDS
    Last updated: 30/09/2012 by Coh3n

Example:

.. code-block:: pascal

    if (players[currentPlayer].logout()) then
      writeln('We are logged out!');
*}
function _logout(): boolean;
var
  x, y: integer;
  t := (getSystemTime + (15000));
begin
  if (not loggedIn()) then
  begin
    result := true;
    exit;
  end;

  if (@SRL_Events[EVENT_LOGOUT] <> nil) then
    SRL_Events[EVENT_LOGOUT]();

  if (not gameTab(TAB_LOGOUT)) then
  begin
    closeWindow(); // incase the bank or another interface is open

    if (not gameTab(TAB_LOGOUT)) then
      exit;
  end;

  wait(100 + random(200));

  if (findText(x, y, ['Login'], [UpCharsEx], MI_BOX, 1000)) then
  begin
    mouse(point(x, y).rand(3, 10), MOUSE_LEFT);

    while (not result) and (getSystemTime < t) do
    begin
      subDebug('Waiting for login screen...');
      result := (not loggedIn());
      wait(700 + random(500));
    end;
  end;
end;

const
  __RES_DEBUG  = 0;
  __RES_WAIT   = 1;
  __RES_TRIES  = 2;
  __RES_ACTION = 3;
  __RES_LOC    = 4;
function __getLoginResponse(colorCount, timer: integer): TVariantArray;
begin
  case (colorCount) of
    //               debug message      |      wait time | tries | action | player[].location
    763, 2348, 2299:
          result := ['Invalid username/password',  0,         2,  'false',  'Wrong User/Pass'      ];
    1088: result := ['Account has been disabled',  0,         0,  'false',  'Acc Disabled'         ];
     951: result := ['Already logged in',          5000,      5,  'true',   'Already logged in'    ];
    1239: result := ['Not a RS member',            0,         1,  'true',   ''                     ];
     364: result := ['Error connecting',           20000,     9,  'halt',   'Error Connecting'     ];
    1057: result := ['Too many incorrect logins',  5 * 60000, 2,  'false',  'Too many logins'      ];
     732: result := ['Runescape has been updated', 0,         0,  'update', 'RS Updated'           ];
     591: result := ['Client token changed',       0,         0,  'update', 'Client Token Changed' ];
    1606: result := ['Game session expired',       0,         0,  'update', 'Session Expired'      ];
     777: result := ['Login limit exceeded',       20000,     10, '',       'Waiting for login.'   ];
     850: result := ['Skill level 1000+ required', 0,         9,  'true',   '1000 skill club'      ];
    1028: result := ['Player in member-only area', 0,         1,  'false',  'In member-only area'  ];

    else
      if (getSystemTime() > timer) then
        debug('One minute has passed... Color count: '+toStr(colorCount));
  end;
end;

{*
__enterLoginInfo()
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __enterLoginInfo(const inputBox: TBox; const info: string; clickBox: boolean = true): boolean;

Used to enter a players username and password to login to RS.

.. note::

    by Starblaster100, Raymond, IceFire908, Tarajunky & NCDS
    Last updated: 30/09/2012 by Coh3n

Example:

.. code-block:: pascal

    __enterLoginInfo(self.loginName);
*}
function __enterLoginInfo(const inputBox: TBox; const info: string; clickBox: boolean = true): boolean;
var
  t := (getSystemTime + (60000 * 2));
  tpa: TPointArray;
  p: TPoint;
  c: integer;
begin
  repeat
    // check to see if there is already text in the input box
    findColors(tpa, LOGIN_COLOR_TEXT, inputBox);

    // click input box; clicks to the right of existing text
    if (length(tpa) > 0) then // if there's text in the box
    begin
      sortTPAFrom(tpa, point(inputBox.x2, (inputBox.y1 + inputBox.y2 div 2))); // the middle right of the input box
      p := point(tpa[0].x + 20, tpa[0].y);

      // make sure the point is in the inputBox
      if (not pointInBox(p, inputBox)) then
        p := point(inputBox.x2 - (10 + random(10)), p.y);

      if (clickBox) then
        mouse(p.rand(3), MOUSE_LEFT);
    end else begin
      if (clickBox) then
        mouseBox(inputBox, MOUSE_LEFT);

      break;
    end;

    // delete any existing text
    c := 0;
    while (countColor(LOGIN_COLOR_TEXT, inputBox) > 0) and (c < 25) do
    begin
      inc(c);
      typeByte(VK_BACK);
      wait(50+random(50));
    end;

  until(not findColors(tpa, LOGIN_COLOR_TEXT, inputBox) or (getSystemTime > t));

  wait(100 + random(200));
  typeSend(info);
  result := true;
end;
