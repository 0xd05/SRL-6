(*

Player Management
=================

.. note::
    
    TODO:
    
        - Document variables

*)

{ type TUser;
  Description: The User Record. }
type
  TUser = record
    Login: string;                  // * Login Name
    CharName: string;               // * Human-readable name for progress reports, etc
    Pass: string;                   // * User Pass
    Pin: string;                    // * Current Users Pin Number
    Member: boolean;                // * For Login
    WorldInfo: TVariantArray;       // * [Members {Boolean}, World {Integer}, PVP {Boolean}]
    Level: array[0..24] of Integer; // * Levels of all skills.
    Active: Boolean;                // * Set to True if Ok, False if Lost.
    Loc: string;                    // * User Location
    Status: string;                 // * User Status
    Skill: string;                  // * User Action to Perform
    Worked: Integer;                // * Time User has worked
    Banked: Integer;                // * Number of Banks User has done
    Rand: string;                   // * Current Random
    Booleans: array of Boolean;     // * For reports, etc.
    Integers: array of Integer;     // * For reports, etc.
    Strings: array of string;       // * For reports, etc.
    Extendeds: array of Extended;   // * For reports, etc.
    Arrays: array of TVariantArray; // * For custom arrays.
    BoxRewards: TStringArray;       // * Partial texts for rewards, place in desired order.
    LampSkill: integer;             // * Skill for reward lamps
  end;

{ const Skills consts
  Description: To be used with Players.Level[] array and Players.LampSkill.
               Starts at 10 so the lampSkill isn't attack by default.
  Players woodcutting level: Players[i].Level[SKILL_WOODCUTTING]
  Last Edit: 24 June 2011 -- Coh3n
}
const
  SKILL_COUNT         = 26;
    SKILL_ATTACK        = 10;
    SKILL_DEFENCE       = 11;
    SKILL_STRENGTH      = 12;
    SKILL_LIFEPOINTS     = 13;    SKILL_HITPOINTS=SKILL_LIFEPOINTS;
    SKILL_RANGE         = 14;
    SKILL_PRAYER        = 15;
    SKILL_MAGIC         = 16;
    SKILL_COOKING       = 17;
    SKILL_WOODCUTTING   = 18;
    SKILL_FLETCHING     = 19;
    SKILL_FISHING       = 20;
    SKILL_FIREMAKING    = 21;
    SKILL_CRAFTING      = 22;
    SKILL_SMITHING      = 23;
    SKILL_MINING        = 24;
    SKILL_HERBLORE      = 25;
    SKILL_AGILITY       = 26;
    SKILL_THIEVING      = 27;
    SKILL_SLAYER        = 28;
    SKILL_FARMING       = 29;
    SKILL_RUNECRAFTING  = 30;
    SKILL_HUNTER        = 31;
    SKILL_CONSTRUCTION  = 32;
    SKILL_SUMMONING     = 33;
    SKILL_DUNGEONEERING = 34;
    SKILL_NONE          = 35;

// * Antirandom const
{ var UseSandwichSolver, UseBoxSolver, UseCerterSolve: Boolean;
  Description: For Slower Computers you may turn off and it will use other means to solve or logout. }
var
  UseFindMod, UseFindTrade: Boolean;

{ var Players: Array of TUser;
  Description: Array of users. }
var
  Players: array of TUser;
  CurrentPlayer, HowManyPlayers: Integer;

{ var CheckHpFirst: Boolean;
  Description: If you want the script to look at the hp and see that it's been lowered before it runs away from a fight. }
var
  CheckHpFirst: Boolean;

{ var ReinCarnate: Boolean;
  Description: If you want your Status to stay True when you die. (Autofighters and DeathWalkers) }
var
  ReinCarnate: Boolean;

{ var LogoutOnMod: Boolean;
  Description: If you wish to logout, wait then login again when a mod is found. }
var
  LogoutOnMod: Boolean;
  
var
  PlayerCurTime, PlayerStartTime: LongInt;

(*
NumberOfPlayers
~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure NumberOfPlayers(Number: Integer);

Makes the Players array have Number indexes, also sets strings and
other player array's too standard 100.

.. note::

    by BenLand100 / Wizzup?

Example:

.. code-block:: pascal

*)
procedure NumberOfPlayers(Number: Integer);
var
   I: Integer;
begin
  SetLength(Players, Number);
  HowManyPlayers := Number;
  for I := 0 to HowManyPlayers - 1 do
  begin
    SetLength(Players[i].Strings, 100);
    SetLength(Players[i].Integers, 100);
    SetLength(Players[i].Booleans, 100);
    SetLength(Players[i].Extendeds, 100);
    SetLength(Players[i].Arrays, 100);
  end;
end;

(*
PlayersActive
~~~~~~~~~~~~~

.. code-block:: pascal

    function PlayersActive: Integer;

Numbers of players active in the Players array.

.. note::

    by ss23

Example:

.. code-block:: pascal

*)
function PlayersActive: Integer;
var
  i, h: Integer;
begin
  Result := 0;
  h := High(Players);
  for i := 0 to h do
    if (Players[i].Active) then
      Inc(Result);
end;

(*
AllPlayersInactive
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure NumberOfPlayers(Number: Integer);

Returns true if all players are inactive in the Players array.

.. note::

    by ZephyrsFury

Example:

.. code-block:: pascal

*)
function AllPlayersInactive: Boolean;
begin
  Result := (PlayersActive = 0);
end;

