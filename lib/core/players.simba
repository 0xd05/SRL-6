(*
Player Management
=================

The Players file stores the functions related to the Players array. It also
stores properties of the TPlayer type.

*)

{$include_once ../core/login.simba}
{$include_once ../interfaces/lobby.simba}

(*
Constant: Skills
~~~~~~~~~~~~~~~~

Integer constants that represent each skill.

Example:

.. code-block:: pascal

    players[currentPlayer].skillLevel[SKILL_ATTACK] := 50;

*)
const
  SKILL_COUNT = 25;
    SKILL_ATTACK = 0;
    SKILL_DEFENCE = 1;
    SKILL_STRENGTH = 2;
    SKILL_HITPOINTS = 3;
    SKILL_RANGE = 4;
    SKILL_PRAYER = 5;
    SKILL_MAGIC = 6;
    SKILL_COOKING = 7;
    SKILL_WOODCUTTING = 8;
    SKILL_FLETCHING = 9;
    SKILL_FISHING = 10;
    SKILL_FIREMAKING = 11;
    SKILL_CRAFTING = 12;
    SKILL_SMITHING = 13;
    SKILL_MINING = 14;
    SKILL_HERBLORE = 15;
    SKILL_AGILITY = 16;
    SKILL_THIEVING = 17;
    SKILL_SLAYER = 18;
    SKILL_FARMING = 19;
    SKILL_RUNECRAFTING = 20;
    SKILL_HUNTER = 21;
    SKILL_CONSTRUCTION = 22;
    SKILL_SUMMONING = 23;
    SKILL_DUNGEONEERING = 24;

(*
Type: TPlayer
~~~~~~~~~~~~~

A record that stores useful information about the current players.  It is up to
the scripter to set these attributes in their scripts.

Example:

.. code-block:: pascal

    with players[0] do
    begin
      loginName := 'example@example.com';
      displayName := 'Sir Example III';
      nickname := 'fighter1';
      password := 'thisismypassword12345';
    end;

*)
type
  TPlayer = record
    loginName: string;
    displayName: string;
    nickname: string;
    password: string;
    bankPin: string;
    location: string;
    active: boolean;
    member: boolean;
    findMod: boolean;
    findTrade: boolean;
    reincarnate: boolean;
    worked: integer;
    skillLevel: array[0..(SKILL_COUNT - 1)] of integer;
    booleans: array[0..99] of boolean;
    integers: array[0..99] of integer;
    strings: array[0..99] of string;
    extendeds: array[0..99] of extended;
    variants: array[0..99] of variant;
  end;

  TPlayerArray = array of TPlayer;

(*
Player Variables
~~~~~~~~~~~~~~~~

All the variables associated with players.simba.

  * players: used to store player information.
  * currentPlayer: the player currently running.
  * numberOfPlayers: how many players to run.
  * playerStartTime: used to calcualte players[].worked.

*)
var
  players: TPlayerArray;
  currentPlayer: integer;
  playerStartTime: longInt;

function getPlayers(): TPlayerArray; forward; // from player_info.simba

(*
TPlayerArray.getActive
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayerArray.getActive(): integer;

Returns the number of players that are still active in the TPlayerArray.

.. note::

    by ss23 & Coh3n
    Last updated: Dec. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    while (players.getActive() > 0) do
      mainloop();
*)
function TPlayerArray.getActive(): integer;
var
  i, h: integer;
begin
  result := 0;
  h := high(self);

  for i := 0 to h do
    if (self[i].active) then
      inc(result);
end;

(*
TPlayerArray.add
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayerArray.add(info: TPlayer);

Adds the player with 'info' to the TPlayerArray.

.. note::

    by Zyt3x & Coh3n
    Last updated: Dec. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

    var
      P: TPlayer;
      Players: TPlayerArray;
    begin
      with P do
      begin
        loginName := 'example@example.com';
        password := 'examplepassword123';
      end;

      Players.add(P);
    end;
*)
procedure TPlayerArray.add(const info: TPlayer);
var
  h: integer;
begin
  setLength(self, length(self) + 1);
  self[high(self)] := info;

  h := high(self);
  self[h] := info;
  self[h].active := true;
  self[h].findMod := true;
end;

(*
TPlayerArray.setup
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayerArray.setup(names: TStringArray);

Sets up the players with login name, display name, or nickname that match
elements of 'names'.  Called only in DeclarePlayers().

.. note::

    by Zyt3x & Coh3n
    Last updated: Dec. 22nd, 2012 by Coh3n

Example:

.. code-block:: pascal

   players.setup(['woodcutter5', 'miner3', 'fisher6']);

*)
procedure TPlayerArray.setup(names: TStringArray);
var
  i, j: integer;
  tmp: TPlayerArray;
begin
  tmp := getPlayers();

  for i := 0 to high(names) do
    for j := 0 to high(tmp) do
    begin
      if (names[i] = tmp[j].loginName) or (names[i] = tmp[j].displayName) or (names[i] = tmp[j].nickname) then
      begin
        self.add(tmp[j]);
        break;
      end;

      if (j = high(tmp)) then
        debug('Invalid player name: '+names[i]);
    end;
end;

(*
TPlayer.write
~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayer.write();

Writes the standard information about the player.

.. note::

    by Coh3n
    Last updated: Dec. 22nd, 2012 by Zyt3x

Example:

.. code-block:: pascal

    players[currentPlayer].write();

*)
procedure TPlayer.write();
begin
  writeln('Login Name: ', loginName);
  writeln('Display Name: ', displayName);
  writeln('Nickname: ', nickname);
  writeln('Member: ', member);
  writeln('Active: ', active);
end;

function TPlayer.next(active: boolean): boolean;
begin
end;

(*
TPlayer.addWorked
~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayer.addWorked();

Increased the player's .worked property so it can be accessed later.

.. note::

    by SRL Community
    Last updated: Nov. 1st, 2012 by Coh3n

Example:

.. code-block:: pascal

    if (bankedLogs = true) then
      players[currentPlayer].addWorked();

*)
procedure TPlayer.addWorked();
begin
  if (playerStartTime > 0) then // if it's been set at all
    incEx(worked, (getSystemTime - playerStartTime));

  playerStartTime := getSystemTime();
end;

function TPlayer.__loginActions(const action: string): boolean;
begin
  case (action) of
    'false':
      self.next(false);

    'true':
      self.next(true);

    'halt':
      halt();

    'update':
      begin
        if (@SRL_Events[EVENT_RS_UPDATE] <> nil) then
        begin
          debug('Waiting 5 minutes before calling update procedure');
          wait(5 * 60000);
          SRL_Events[EVENT_RS_UPDATE];
          exit(false);
        end;

        halt();
      end;
  end;
end;

(*
TPlayer.loginToLobby
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function TPlayer.loginToLobby(): boolean;

Logs the TPlayer into to lobby.

Example:

.. code-block:: pascal

    players[currentPlayer].loginToLobby();

*)
function TPlayer.loginToLobby(): boolean;
var
  t := (getSystemTime + 60000);
  arr: TVariantArray;
  c, tries: integer;
begin
  repeat
    inc(tries);

    debug(capitalize(self.loginName)+' ('+capitalize(self.displayName)+')');
    __enterLoginInfo(UBOX, self.loginName);
    __enterLoginInfo(PBOX, self.password, false);

    wait(800 + random(50));	// fixes the login spam recoveries bug

    repeat
      setLength(arr, 0);

      // counts the colors in the lobby pop up screen
      c := countColor(LOGIN_COLOR_TEXT, 260, 190, 510, 450);
      arr := __getLoginResponse(c, t);

      if (length(arr) > 0) then // if there was an error logging in
      begin
        debug('Login response: '+arr[__RES_DEBUG]);
        wait(2000 + arr[__RES_WAIT] + randomRange(-200, 200));
        typeByte(VK_ESCAPE); // exit response window

        if (tries <= arr[__RES_TRIES]) then
        begin
          wait(500 + random(500));
          break;
        end;

        if (arr[__RES_LOC] <> '') then
          self.location := arr[__RES_LOC];

        self.__loginActions(arr[__RES_ACTION]);
      end;

      // to handle the validate email screen
      if (getColor(473, 468) = 1001495) then // gold border around the "confirm" button
        mouseBox(intToBox(502, 474, 548, 485), MOUSE_LEFT); // the "skip" button

      wait(100 + random(100));
      result := (isLobbyScreenOpen());

    until(result);
  until(result);
end;

function TPlayer.login(): boolean;
var
  attempts: integer;
begin
  repeat
    if (self.loginToLobby()) then
    begin
    end;
  until(attempts >= 0);
end;

function TPlayer.logout(): boolean;
begin
  result := _logout();
end;
