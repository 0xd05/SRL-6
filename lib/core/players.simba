(*
Player Management
=================

The Players file stores the functions related to the Players array. It also
stores properties of the TPlayer type.
*)

(*
Constant: Skills
~~~~~~~~~~~~~~~~

Integer constants that represent each skill.

Example:

.. code-block:: pascal

  players[currentPlayer].skillLevel[SKILL_ATTACK] := 50;

*)
const
  SKILL_COUNT = 25;
    SKILL_ATTACK = 0;
    SKILL_DEFENCE = 1;
    SKILL_STRENGTH = 2;
    SKILL_HITPOINTS = 3;
    SKILL_RANGE = 4;
    SKILL_PRAYER = 5;
    SKILL_MAGIC = 6;
    SKILL_COOKING = 7;
    SKILL_WOODCUTTING = 8;
    SKILL_FLETCHING = 9;
    SKILL_FISHING = 10;
    SKILL_FIREMAKING = 11;
    SKILL_CRAFTING = 12;
    SKILL_SMITHING = 13;
    SKILL_MINING = 14;
    SKILL_HERBLORE = 15;
    SKILL_AGILITY = 16;
    SKILL_THIEVING = 17;
    SKILL_SLAYER = 18;
    SKILL_FARMING = 19;
    SKILL_RUNECRAFTING = 20;
    SKILL_HUNTER = 21;
    SKILL_CONSTRUCTION = 22;
    SKILL_SUMMONING = 23;
    SKILL_DUNGEONEERING = 24;

(*
Type: TPlayer
~~~~~~~~~~~~~

A record that stores useful information about the current players.  It is up to
the scripter to set these attributes in their scripts.

Example:

.. code-block:: pascal

  with players[0] do
  begin
    loginName := 'example@example.com';
    displayName := 'Sir Example III';
    password := 'thisismypassword12345';
  end;

*)
type
  TPlayer = record
    loginName: string;
    displayName: string;
    password: string;
    bankPin: string;
    location: string;
    active: boolean;
    member: boolean;
    findMod: boolean;
    findTrade: boolean;
    reincarnate: boolean;
    worked: integer;
    skillLevel: array[0..(SKILL_COUNT - 1)] of integer;
    booleans: array[0..99] of boolean;
    integers: array[0..99] of integer;
    strings: array[0..99] of string;
    extendeds: array[0..99] of extended;
    variants: array[0..99] of variant;
  end;

(*
Player Variables
~~~~~~~~~~~~~~~~

All the variables associated with players.simba.

  * players: used to store player information.
  * currentPlayer: the player currently running.
  * numberOfPlayers: how many players to run.
  * playerStartTime: used to calcualte players[].worked.

*)
var
  players: array of TPlayer;
  currentPlayer, numberOfPlayers: integer;
  playerStartTime: longInt;

(*
getPlayersActive()
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getPlayersActive(): Integer;

Returns the number of players that are still active.

.. note::

    by ss23

Example:

.. code-block:: pascal

  while (getPlayersActive() > 0) do
    mainloop();
*)
function getPlayersActive(): Integer;
var
  i, h: Integer;
begin
  Result := 0;
  h := High(Players);

  for i := 0 to h do
    if (Players[i].Active) then
      Inc(Result);
end;

(*
TPlayer.addWorked()
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    procedure TPlayer.addWorked();

Increased the player's .worked property so it can be accessed later.

.. note::

    by SRL Community
    Last updated: Nov. 1st, 2012 by Coh3n

Example:

.. code-block:: pascal

  if (bankedLogs = true) then
    players[currentPlayer].addWorked();

*)
procedure TPlayer.addWorked();
begin
  if (playerStartTime > 0) then // if it's been set at all
  begin
    incEx(self.worked, (getSystemTime - playerStartTime));
    playerStartTime := getSystemTime();
  end;
end;
