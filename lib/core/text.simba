(*
Text
====

The text file holds functions and procedures that are used in Runescape text
recognition.

The source for this file can be found `here <https://github.com/SRL/SRL-6/blob/master/lib/core/text.simba>`_.

*)

{$include_once ../interfaces/interfaces.simba}
{$include_once debug.simba}
{$include_once mouse.simba}

{$f-}

(*
findText
~~~~~~~~

.. code-block:: pascal

    function findText(var p: TPoint; txt, fonts: TStringArray; searchBox: TBox): boolean;

Uses a bitmap mask to find text on the screen.  Returns true if the text is found.

    * p: The point the text is found.
    * txt: The text to look for.
    * fonts: The font(s) of the text.
    * searchBox: The box to look for the text.

.. note::

    - by Stupid3ooo, modified by LordJashin & Coh3n
    - Last Updated: Feb. 20, 2013 by Coh3n

Example:

.. code-block:: pascal

    var
      p: TPoint;
    begin
      if (findText(p, ['Lobby'], [upCharsEx], tabLogout.bounds)) then
        writeln('Found "Exit to Lobby" text');
      .
      .
      .
    end;
*)
function findText(var p: TPoint; txt, fonts: TStringArray; searchBox: TBox): boolean;
var
  s, i, j, w, h: integer;
begin
  p := [-1, -1];

  for i := 0 to high(txt) do
    for j := 0 to high(fonts) do
    begin
      s := bitmapFromText(toStr(txt[i]), toStr(fonts[j]));

      // to prevent looking outside the client
      if (searchBox.x1 < 0) then searchBox.x1 := 0;
      if (searchBox.y1 < 0) then searchBox.y1 := 0;

      if (findBitmapMaskTolerance(s, p, searchBox, 30, 30)) then
      begin
        getBitmapSize(s, w, h);
        p := point(p.x + round(w / 2), p.y + round(h / 2));
        result := true;
      end;

      freeBitmap(s);

      if (result) then
        break(2);
    end;
end;

(*
findText; overload;
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function findText(var p: TPoint; col, tol: integer; txt, fonts: TStringArray; lookIn: TBox; waitTime: integer = 0): boolean; overload;

Uses TPointArrays to find text on the screen.  Searches for the color (col) with
tolerance (tol) on the screen, then looks for the text (txt) in a TPA created
from the fonts (fonts).  Looks in the box (lookIn) and returns the point found
(p). Returns true if the text is found. If the optional parameter (waitTime) is
set, will wait specified amount of time for the text to be found before returning
false.


.. note::

    - by Raymond and Coh3n
    - Last Updated: Feb. 20, 2013 by Coh3n

Example:

.. code-block:: pascal

    var
      p: TPoint;
    begin
      if (findText(p, clWhite, 10, ['Lobby'], [upCharsEx], gameTabArea)) then
        writeln('Found "Exit to Lobby" text');
      .
      .
      .
    end;
*)
function findText(var p: TPoint; col, tol: integer; txt, fonts: TStringArray; lookIn: TBox; waitTime: integer = 0): boolean; overload;
var
  b: TBox;
  i, j, w, h, t: integer;
  tpaColors, tpaText, matches: TPointArray;
begin
  t := (getSystemTime() + waitTime);
  p := point(-1, -1);

  if (not findColorsTolerance(tpaColors, col, lookIn, tol)) then
    exit(false);

  repeat
    // loop through the fonts and texts to look for
    for i := 0 to high(txt) do
      for j := 0 to high(fonts) do
      begin
        tpaText := TPAFromText(txt[i], fonts[i], w, h);

        if (tpaColors.findTextIn(h - 1, tpaText, matches)) then
        begin
          // sort the tpa matches and return the top left of the text
          b := tpaText.getBounds();
          matches.sortFromPoint(point(b.x1, b.y1));
          p := matches[0];

          result := true;
          break(3);
        end;
      end;
  until(getSystemTime() > t);
end;

function extractTextFromTPA(tpa: TPointArray; minvspacing, maxvspacing, hspacing: integer; font: string): string;
var
  atpa: T2DPointArray;
  b: TBox;
begin
  if (length(tpa) < 1) then
    exit;

  atpa := clusterTPAEx(tpa, minvspacing, hspacing);
  b := getTPABounds(tpa);

  sortATPAFromFirstPointX(atpa, point(b.x1, b.y1 + b.getHeight() div 2));
  result := getTextATPA(atpa, maxvspacing, font);
end;

(*
mouseText
~~~~~~~~~

.. code-block:: pascal

    function mouseText(txt, fonts: TStringArray; searchBox: TBox; mouseAction: integer): boolean;

Returns true if the mouse action is performed on the text.

    * txt: The text to look for.
    * fonts: The font(s) of the text.
    * searchBox: The box to look for the text.
    * mouseAction: The action of the mouse.

.. note::

    - by Coh3n
    - Last Updated: Mar. 1, 2013 by Coh3n

Example:

.. code-block:: pascal

    mouseText(['Lobby'], [upCharsEx], tabLogout.bounds, MOUSE_LEFT);
*)
function mouseText(txt, fonts: TStringArray; searchBox: TBox; mouseAction: integer): boolean;
var
  p: TPoint;
begin
  if (findText(p, txt, fonts, searchBox)) then
  begin
    mouse(p.rand(3, 10), mouseAction);
    exit(true);
  end;
end;

(*
typeByte
~~~~~~~~

.. code-block:: pascal

    procedure typeByte(k: byte);

Types one character k.

.. note::

    - by Mutant Squirrle

Example:

.. code-block:: pascal

    typeByte(VK_ENTER);

*)
procedure typeByte(k: byte);
begin
  {$IFDEF SMART}
  if (k = 13) then
    k := 10;
  {$ENDIF}

  KeyDown(k);
  Wait(10 + Random(50));
  KeyUp(k);
end;

(*
typeByteWait
~~~~~~~~~~~~

.. code-block:: pascal

    procedure typeByteWait(key: Byte; waitTime: integer);

Holds down the desired key for the set waitTime.

.. note::

    - by Ollybest

Example:

.. code-block:: pascal

     typeByteWait(vk_up, 800 + random(200));
*)
procedure typeByteWait(key: Byte; waitTime: integer);
begin
  if (not (isKeyDown(key))) then
    keyDown(key);

  wait(waitTime);

  if isKeyDown(key) then
    keyUp(key);
end;

(*
typeSend
~~~~~~~~

.. code-block:: pascal

    procedure typeSend(text: string; pressEnter: boolean = true);

Types text in a human-like way.  Optional parameter 'pressEnter'.  Will press
enter by default.

.. note::

    - by SKy Scripter
    - Last Updated: January 29th, 2013 by Coh3n

Example:

.. code-block:: pascal

    // to type and press enter
    typeSend('Hello');

    // to type and not press enter
    typeSend('Hello', false);

*)
procedure typeSend(text: string; pressEnter: boolean = true);
var
  i: Integer;
begin
  for i := 1 to Length(Text) do
  begin
    SendKeys(Text[i], 30 + Random(30), 30 + Random(30));
    Wait(40 + Random(40));
  end;

  if (pressEnter) then
    TypeByte(VK_ENTER);
end;

(*
multiType
~~~~~~~~~

.. code-block:: pascal

    function multiType(text: string; chance, maxSends: integer; pressEnter: boolean = true): boolean;

Will simulate "spam" typing of string, text.  Will do it a random amount
between 1 and 'maxSends'.  Will always type once, then has a percent
'chance' of typing again.  Will not exceed 'maxSends'.

.. note::

    - Author: Ashaman88
    - Last Updated: 7 May 2014 by Ashaman88

Example:

.. code-block:: pascal

    if (mainscreen.isUptext('Tree')) then
      multiType('woot', 35, 5, true);
*)
function multiType(text: string; chance, maxSends: integer; pressEnter: boolean = true): boolean;
var
  sends: integer;
begin
  result := true;

  repeat
    inc(sends);
    typeSend(text, pressEnter);

    if (random(100) > chance) or (not result) then
      break;

    wait(50 + random(50));
  until(sends >= maxSends);
end;

(*
multiType
~~~~~~~~~

.. code-block:: pascal

    function multiType(k: byte; chance, maxSends: integer; pressEnter: boolean = true): boolean; overload;

Overload for the other multiType, but uses bytes for the key sending

.. note::

    - Author: Ashaman88
    - Last Updated: 7 May 2014 by Ashaman88

Example:

.. code-block:: pascal

    if (mainscreen.isUptext('Tree')) then
      multiType(VK_SPACE, 35, 5);
*)
function multiType(k: byte; chance, maxSends: integer): boolean; overload;
var
  sends: integer;
begin
  result := true;

  repeat
    inc(sends);
    typeByte(k);

    if (random(100) > chance) or (not result) then
      break;

    wait(50 + random(50));
  until(sends >= maxSends);
end;

{*
__findMouseOverBox
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __findMouseOverBox(out box: TBox): boolean;

Returns true if the mouse-over box is found on the client.  Returns it's coordinates
in 'box'.

.. note::

    - by euphemism
    - Last Modified: 12 August 2013 by euphemism

Example:

.. code-block:: pascal

    if (__findMouseOverBox(tmpBox)) then
      writeln('Found mouse-over box!');
*}
{$IFNDEF CODEINSIGHT}
function __findMouseOverBox(out box: TBox): boolean;
const
  BORDER_COLOR = 4208424;
  BORDER_TOLERANCE = 7;
  CORNER_COLOR = 3616289;
var
  p: TPoint;
  clientArea, searchBox: TBox;
  tpaBorder, tpaBorderPoints, tpa: TPointArray;
  atpa: T2DPointArray;
  i, h: integer;
  b: TBox;
begin
  result := false;

  getMousePos(p.x, p.y);
  getClientDimensions(clientArea.x2, clientArea.y2);

  dec(clientArea.x2); dec(clientArea.y2);

  searchBox := [p.x - 200, p.y - 100, p.x + 350, p.y + 150];
  searchBox.setLimit(clientArea);

  if (findColorsTolerance(tpaBorder, BORDER_COLOR, searchBox, BORDER_TOLERANCE)) then
    if (findColors(tpaBorderPoints, CORNER_COLOR, searchBox)) then
    begin
      tpa := combineTPA(tpaBorder, tpaBorderPoints);
      atpa := clusterTPAEx(tpa, 1, 1);
      sortATPASize(atpa, true);

      h := high(atpa);

      for i := 0 to h do
      begin
        if (length(atpa[i]) < 15) then
          continue;

        b := atpa[i].getBounds();

        if (b.getWidth() < 50) or (b.getHeight() < 15) then // basic size check
          continue;

        result := (getColor(b.x1+1, b.y1) = CORNER_COLOR);// check corner is a corner color

        if (result) then
        begin
          box := [b.x1 +1, b.y1 +1, b.x2 -1, b.y2 -1];  // set the result (decrease bounds by 1)
          break;
        end;
      end;
    end;
end;
{$ENDIF}

{*
__getMouseOverText
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function __getMouseOverText(box: TBox; cleanBitmap, filteredBitmap: integer): string;

Returns the mouse-over text found inside the 'box' based on the clean and
filtered bitmaps.

.. note::

    - by euphemism
    - Last Modified: 12 August 2013 by euphemism

Example:

.. code-block:: pascal

    if (__findMouseOverBox(tmpBox)) then
    begin
      __createMouseOverFilter(tmpBox, bmpClean, bmpFiltered);
      text := __getMouseOverText(tmpBox, bmpClean, bmpFiltered);
      writeln('Mouse-over text: '+text);
    end;
*}
{$IFNDEF CODEINSIGHT}
function __getMouseOverText(box: TBox): string;
var
  tpa: TPointArray;
  atpa: T2DPointArray;
  bmp, wid, hei, i, h, l: integer;
  s: TStringArray;
begin
  result := '';

  bmp := bitmapFromClient(box);
  getBitmapSize(bmp, wid, hei);

  thresholdAdaptiveBitmap(bmp, 0, 255, false, TM_Mean, 100);

  if (not findColorsBitmap(bmp, tpa, clRed)) then
    exit();

  atpa := clusterTPAEx(tpa, wid, 2);
  l := length(atpa);

  sortATPAFromFirstPointY(atpa, point(wid div 2, 0));
  setLength(s, l);

  for i := 0 to (l - 1) do
  begin
    s[i] := extractTextFromTPA(atpa[i], 1, 4, 5, MouseOverChars);

    if ((i + 1) <= (l - 1)) then
      s[i] := s[i] + ' ';
  end;

  result := implode('', s);

  freeBitmap(bmp);
end;
{$ENDIF}

(*
getMouseOverText
~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function getMouseOverText(): string;

Returns the current mouse-over text.

.. note::

    - by euphemism & Coh3n
    - Last Modified: 12 August 2013 by Coh3n

Example:

.. code-block:: pascal

    writeln(getMouseOverText());
*)
function getMouseOverText(): string;
var
  box: TBox;
begin
  result := '';

  if (__findMouseOverBox(box)) then
    result := __getMouseOverText(box);
end;

(*
isMouseOverText
~~~~~~~~~~~~~~~

.. code-block:: pascal

    function isMouseOverText(txt: TStringArray; waitTime: integer = 100): boolean;

Returns true if one of the indexes in 'txt' is found in the current mouse-over text.
Will wait up to 'waitTime' to find the text before exiting the function.

.. note::

    - by Coh3n
    - Last Modified: 12 August 2013 by Coh3n

Example:

.. code-block:: pascal

    if (isMouseOverText(['Tree'])) then
    begin
      getMousePos(x, y);
      mouse(point(x, y), MOUSE_LEFT);
    end;
*)
function isMouseOverText(txt: TStringArray; waitTime: integer = 250): boolean;
var
  i, t: integer;
  s: string;
begin
  print('isMouseOverText()', TDebug.HEADER);
  t := (getSystemTime() + waitTime);

  repeat
    s := getMouseOverText();
    print('Current mouse-over text: "'+s+'"');

    for i := 0 to high(txt) do
      if (pos(txt[i], s) > 0) then
      begin
        print('Found "'+txt[i]+'" in mouse-over string: "'+s+'"');
        result := true;
        break(2);
      end;

    wait(20 + random(20));
  until (getSystemTime() > t);

  print('isMouseOverText(): '+toStr(result), TDebug.FOOTER);
end;

(*
isMouseOverMenuOpen
~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

    function isMouseOverMenuOpen(var res: TBox; waitTime: integer = 100): boolean;

Returns true if the mouse-over menu is open.  Will wait a maximum of
'waitTime' for the menu to appear.

.. note::

    - by Coh3n
    - Last Modified: 12 August 2013 by Coh3n

Example:

.. code-block:: pascal

    if (isMouseOverMenuOpen()) then
      writeln('Mouse-over menu is open');
*)
function isMouseOverMenuOpen(var res: TBox; waitTime: integer = 100): boolean;
var
  t: integer;
begin
  res := [-1, -1, -1, -1];
  t := (getSystemTime() + waitTime);

  while ((getSystemTime() < t) and (not result)) do
  begin
    result := __findMouseOverBox(res);
    wait(20 + random(20));
  end;

end;







