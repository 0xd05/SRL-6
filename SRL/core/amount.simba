(*
Amount
======

The Amount include contains all kinds of functions to get the amount of items.
Items can be in your bank or in your inventory.

*)

const
  srl_AREA_INVENTORY = 0; // ... FIX
  srl_AREA_SHOP = 1; // ... FIX
  srl_AREA_BANK = 2; // ... FIX
  srl_AREA_DEPOSITBOX = 3; // ... FIX
  srl_AREA_TRADE = 4; // ... FIX
  srl_AREA_TRADE_YOUR = 5; // ... FIX

function BankScreen: Boolean; forward; // ... FIX
function DepositScreen: Boolean; forward; // ... FIX

(*

srl_ITEM_IDENT Consts
~~~~~~~~~~~~~~~~~

Constants associated with the different finding methods.
These consist of:

- *BITMAP*
- *DTM*
- *COLOUR*, *COLOR*
- *MASK*[*]_

.. [*] Refers to bitmap masks.

*)

const
  srl_ITEM_IDENT_BITMAP = 0;
  srl_ITEM_IDENT_DTM    = 1;
  srl_ITEM_IDENT_COLOUR = 2;  srl_ITEM_IDENT_COLOR = srl_ITEM_IDENT_COLOUR;
  srl_ITEM_IDENT_MASK   = 3;

(*
srl_TItemInterface Record
~~~~~~~~~~~~~~~~~~~~~~~~~

Record holding information of an interface of items. The record is structured as
follows:

start: **TPoint**
  The coordinates associated with the Item Interface. Typically, this denotes
  the origin of the colums and rows.

rowsize,colsize: **Integer**
  The dimensions of the rows or columns respectively. This is a measurement in
  pixels.

rownumber,colnumber: **Integer**
  The number of rows or colums respectively present in the ItemInterface
  which creates the grid.

valid: **function: Boolean**
  Functional pointer to check if the respective ItemInterface is available at
  this time. For example:
  .. code-block:: pascal
    bankArea := AreaInfo(srl_ITEMINT_BANK);
    if (bankArea.valid()) then
    //...

*)

type
  srl_TItemInterface = record
    start: TPoint;      // area coords
    rowsize,colsize: Integer;  //w,h of cols,rows
    colnumber,rownumber: Integer;  //num of cols,rows
    valid: function: Boolean;
  end;

(*

srl_ITEMINT Consts
~~~~~~~~~~~~~~~~~~

Constants created for selecting precreated TItemInterfaces's_. Use these
constants for loading SRL's TItemInterfaces.

The constant suffixes[#]_ are as follows:
- *INVENTORY*
- *SHOP*
- *BANK*
- *DEPOSITBOX*
- *TRADE*
- *TRADE_YOUR*

.. note::
  Modified: 13 Jan 2011 - Nava2

.. _TItemInterfaces's: `srl_TItemInterface Record`
.. [#] All constants here are prepended with ``srl_ITEMINT_``.

*)

const
  srl_ITEMINT_INVENTORY  = 0;
  srl_ITEMINT_SHOP       = 1;
  srl_ITEMINT_BANK       = 2;
  srl_ITEMINT_DEPOSITBOX = 3;
  srl_ITEMINT_TRADE      = 4;
  srl_ITEMINT_TRADE_YOUR = 5; // rename?

(*
TradeScreen
~~~~~~~~~~~

.. code-block:: pascal

    function TradeScreen: Integer;

Returns srl_ITEMINT_TRADE or srl_ITEMINT_TRADE_YOUR for the respective
tradescreens, -1 if neither is open.

.. note::

  by Zephyrsfury

.. note::
  Modified: 13 Jan 2011 - Nava2

Example:

.. code-block:: pascal
  if (TradeScreen > 0) then
    WriteLn('We''re at a trade screen!');

*)

function getTradeScreen: Integer;
begin
  if (CountColor(16776960, 127, 32, 373, 51) > 20) then
    Result := srl_ITEMINT_TRADE
  else if (GetColor(93, 69) = 0) then
    Result := srl_ITEMINT_TRADE_YOUR   //confirmation??
  else
    Result := -1;
end;

(*

isTradeScreen
~~~~~~~~~~~~~

.. code-block:: pascal
  function isTradeScreen: Boolean;

Returns true if one of the trade screens is open.

Example:

.. code-block:: pascal
  if (isTradeScreen) then
    clickConfirm;

.. note::
  Modified: 13 Jan 2011 - Nava2
*)

function TradeScreen: Boolean;
begin
  Result := (getTradeScreen > 0);
end;

(*
ShopScreen
~~~~~~~~~~

.. code-block:: pascal

    Function ShopScreen : Boolean;

Returns true if a shop interface is opened.

.. note::

  by ZephyrsFury fixed by NCDS

Example:

.. code-block:: pascal

.. note::
  Modified: 13 Jan 2011 - Nava2

*)

Function ShopScreen : Boolean;
Begin
  Result := FindTextTPA(
      2070783, 10, 58, 303, 85, 317, 'Right', StatChars, Nothing
    );
End;

(*
FindItemEx
~~~~~~~~~~

.. code-block:: pascal

  function FindItemEx(
      var x, y: Integer;
      IdentType, Ident: Integer;
      Area: TBox;
      Tol: TIntegerArray
  ): Boolean;

Finds an item_IDENT in Area specified by TBox in Area.
Valid IdentTypes are the `ITEM_IDENT Constants`_.

The tolerance parameter works as follows:
  - *Tol[0]*: Color Tolerance;
  - *Tol[1]*: Contour Tolerance or minimum Colors to Find to be True.

The main purpose of this and `FindItem`_ are for generalizing helpers in the
different files in these includes. They can easily be used outside for different
generalizations as well, though.

.. note::
  by Nava2

Example:

.. code-block:: pascal
  var
    x,y: Integer;
    b: TBox;
  begin
    b:= IntToBox(MMX1, MMY1, MMX2, MMY2);
    if (FindItemEx(x,y, srl_ITEMIDENT_BITMAP, the_bmp, b, [4])) then
      Mouse(x,y,5,5,mouse_right);
  end;

.. note::
  Modified: 13 Jan 2011 - Nava2
*)

function FindItemEx(
    var x, y: Integer;
    IdentType, Ident: Integer;
    Area: TBox;
    Tol: TIntegerArray
  ): Boolean;
var
  Pts: TPointArray;
begin
  Result := False;
  SetLength(Tol, 2);
  case IdentType of
    srl_ITEM_IDENT_MASK:
      Result := FindBitmapMaskTolerance(
          Ident, x, y, Area.x1, Area.y1, Area.x2, Area.y2, Tol[0], Tol[1]
      );

    srl_ITEM_IDENT_BITMAP:
      Result := FindBitmapToleranceIn(
          Ident, x, y, Area.x1, Area.y1, Area.x2, Area.y2, Tol[0]
      );

    srl_ITEM_IDENT_DTM:
      Result := FindDTM(Ident, x, y, Area.x1, Area.y1, Area.x2, Area.y2);

    srl_ITEM_IDENT_COLOUR:
      begin
        FindColorsTolerance(
            Pts, Ident, Area.x1, Area.y1, Area.x2, Area.y2, Tol[0]
        );
        if Tol[1] < 1 then Tol[1] := 1;
        Result := Length(Pts) >= Tol[1];
        if Result then
          MiddleTPAEx(Pts, x, y);
      end;
    else
      SRL_Warn(
          'FindItem', 'Invalid identifier input as IdentType.', warn_ALLVERSIONS
      );
  end;
end;

(*
FindItem
~~~~~~~~

.. code-block:: pascal

  function FindItem(
      var x, y: Integer;
      IdentType, Ident: Integer;
      x1, y1, x2, y2: Integer;
      Tol: TIntegerArray
    ): Boolean;


Finds an item in Area specified by x1, y1, x2, y2 in the Area.
Please see `FindItemEx`_ for more information.

.. note::

  by Nava2

Example:

.. code-block:: pascal
  var
    x,y: Integer;
  begin
    if (FindItem(x,y,srl_ITEMIDENT_DTM, DTM, MSX1,MSY1,MSX2,MSY2, [])) then
      Mouse(x,y,0,0,mouse_Left);
  end;

.. note::
  Modified: 13 Jan 2011
*)

function FindItem(
    var x, y: Integer;
    IdentType, Ident: Integer;
    x1, y1, x2, y2: Integer;
    Tol: TIntegerArray
  ): Boolean;
begin
  Result := FindItemEx(x, y, IdentType, Ident, IntToBox(x1, y1, x2, y2), Tol);
end;

(*
GetAmount
~~~~~~~~~

.. code-block:: pascal

  function GetAmount(ItemX, ItemY: Integer): Integer;


Returns the amount of an item_IDENT at coordinates (ItemX, ItemY).
Returns approximate values for 'K' and 'M'.

.. note::

  by Zeph, N1ke & Narcle

Example:

.. code-block:: pascal

*)

function GetAmount(ItemX, ItemY: Integer): Integer;
var
  Col: TIntegerArray;
  X, Y, I: Integer;
  B: TBox;
  TPA: TPointArray;
  S: String;
begin
  Result := 0;
  If Not FindColor(X, Y, srl_outline_black, ItemX-30, ItemY-30, ItemX+30, ItemY+30)then
    Exit;
  Inc(Result);
  Col := [65535, 65278, 16777215, 8453888];
  For I := 0 to High(Col) do
   If FindColor(X, Y, Col[I], ItemX-22, ItemY-22, ItemX+22, ItemY+22)then
   begin
     FindColors(TPA, Col[i], ItemX-22, ItemY-22, ItemX+22, ItemY+22);
     B := GetTPABounds(TPA);
     S := Trim(
        GetTextAtEx(
            B.X1-1, B.Y1-1, 0, StatChars,
            False, False, 0, 1,
            Col[I], 5, True, tr_AllChars
          )
      );
     Result := StrToIntDef(GetNumbers(S), 1);
     Case I of
       2: Result := Result * 1000;
       3: Result := Result * 1000000;
     end;
     Exit;
   end;
end;

(*
AreaInfo
~~~~~~~~

.. code-block:: pascal

  function AreaInfo(area: Integer): srl_TItemInterface;


Returns info on certain interfaces as an srl_TItemInterface.
Row and col amounts, startcoords, sizes for inventory, banks, shop, ...

.. note::

  by masquerader, and Nava2

.. note::
  Modified: 13 Jan 2011 - Nava2

Example:

.. code-block:: pascal

*)

function AreaInfo(area: Integer): srl_TItemInterface;
begin
  case area of
    srl_AREA_INVENTORY:
      with Result do
      begin
        start := Point(560, 212);

        rowsize := 36;
        colsize := 42;

        colnumber := 4;
        rownumber := 7;

        //valid := @isInventoryPresent;  //FIX
      end;

    srl_AREA_SHOP:
      with Result do
      begin
        start := Point(63, 97);

        rowsize := 55;
        colsize := 39;

        colnumber := 10;
        rownumber := 4; //?

        valid := @ShopScreen;
      end;

    srl_AREA_BANK:
      with Result do
      begin
        start := Point(35, 91);

        rowsize := 44;
        colsize := 44;

        colnumber := 10;
        rownumber := 5;

        valid := @BankScreen;
      end;

    srl_AREA_DEPOSITBOX:
      with Result do
      begin
        start := Point(97,60);

        rowsize := 48;
        colsize := 50;

        colnumber := 7;
        rownumber := 4;

        valid := @DepositScreen;
      end;

    srl_AREA_TRADE:
      with Result do
      begin
        start := Point(310, 75);

        rowsize := 32;
        colsize := 49;

        colnumber := 4;
        rownumber := 7;

        valid := @TradeScreen; // ????
      end;

    srl_AREA_TRADE_YOUR:
      with Result do
      begin
        start := Point(24, 75);

        rowsize := 32;
        colsize := 49;

        colnumber := 4;
        rownumber := 7;

        valid := @TradeScreen; //????
      end;
    else
      srl_Warn(
        'AreaInfo', toStr(Area)+' is an invalid option', warn_AllVersions
      );
  end;
end;

(*
CheckArea
~~~~~~~~~

.. code-block:: pascal

  function CheckArea(area: Integer): Boolean;


Checks if the given interface is opened.

.. note::

  by masquerader, and EvilChicken!

.. note::
  Modified: 13 Jan 2011 - Nava2

Example:

.. code-block:: pascal

*)

function CheckArea(area: Integer): Boolean;
begin
  Result := false;
  case area of
    srl_AREA_INVENTORY:
      begin
        Result := (BankScreen) or (ShopScreen) or (TradeScreen);  // ... FIX
        if (not(Result)) then Result := GameTab(tab_Inv);
      end;
    srl_AREA_SHOP:
      Result := ShopScreen;
    srl_AREA_BANK:
      Result := BankScreen;
    srl_AREA_DEPOSITBOX:
      Result := DepositScreen;
    srl_AREA_TRADE, srl_AREA_TRADE_YOUR:
      Result := (TradeScreen); // ... FIX
    else
      srl_Warn(
        'CheckArea', toStr(Area) + ' is an invalid option.', warn_AllVersions
      );
  end;
  if (Result = False) then
    WriteLn('PROBLEM: ' + toStr(Area) + ' interface not open');
end;

(*
ItemCoordinates
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function ItemCoordinates(
      Area, ItemType, Item_IDENT: Integer;
      Tol: TIntegerArray
    ): TPointArray;

Returns a TPA with the positions of all occurances of Item_IDENT.

Parameters:

- Area:
  See `srl_ITEMINT Consts`_
- ItemType:
  See `srl_ITEM_IDENT Consts`_
- Item_IDENT:
  name/value of your dtm/bmp/color/bmpmask.
- Tol:
  + *srl_ITEM_IDENT_DTM*: [][#]_.
  + *srl_ITEM_IDENT_BITMAP*: [BMPTol].
  + *srl_ITEM_IDENT_COLOUR*: [COLOUR Tol, Minimum Colour Count].
  + *srl_ITEM_IDENT_MASK*: [BMPTol, ContourTol].

.. note::

  by masquerader modified by ZephyrsFury

.. note::
  Modified: 13 Jan 2011 - Nava2

Example:

.. code-block:: pascal


.. [#] DTMs do not have a *global* tolerance, its all done per point.

*)

function ItemCoordinates(
    Area, ItemType, Item_IDENT: Integer; Tol: TIntegerArray
  ): TPointArray;
var
  info: srl_TItemInterface;
  x1, y1, x2, y2: Integer;
  itemx, itemy, L: Integer;
  row, col: Integer; // ... FIX
begin
  if (CheckArea(area)) then
  begin
    info := AreaInfo(area);
    SetLength(Result, info.rownumber * info.colnumber);
    for row := 0 to info.rownumber-1 do
      for col := 0 to info.colnumber-1 do
      begin
        x1 := info.start.x + col * info.colsize;
        y1 := info.start.y + row * info.rowsize;
        x2 := x1 + info.colsize;
        y2 := y1 + info.rowsize;
        if (FindItem(Itemx, Itemy, ItemType, Item_IDENT, x1, y1, x2, y2, Tol)) then // ... FIX
        begin
          Result[L].x := ItemX;
          Result[L].y := ItemY;
          Inc(L);
        end;
      end;
  end;
  SetLength(Result, L);
end;

(*
CountItemsIn
~~~~~~~~~~~~

.. code-block:: pascal

  function CountItemsIn(
      Area, ItemType: string; Item_IDENT: Integer; Tol: TIntegerArray
    ): Integer;

Counts the number of items found within the Area. (Does not count stacks)
Parameters:

- Area:
  See `srl_ITEMINT Consts`_
- ItemType:
  See `srl_ITEM_IDENT Consts`_
- Item_IDENT:
  name/value of your dtm/bmp/color/bmpmask.
- Tol:
  + *srl_ITEM_IDENT_DTM*: [][#]_.
  + *srl_ITEM_IDENT_BITMAP*: [BMPTol].
  + *srl_ITEM_IDENT_COLOUR*: [COLOUR Tol, Minimum Colour Count].
  + *srl_ITEM_IDENT_MASK*: [BMPTol, ContourTol].

.. note::

  by masquerader modified by ZephyrsFury

Example:

.. code-block:: pascal

.. [#] DTMs do not have a *global* tolerance, its all done per point.

*)

function CountItemsIn(area, ItemType, Item_IDENT: Integer; Tol: TIntegerArray): Integer;
begin
  Result := Length(ItemCoordinates(Area, ItemType, Item_IDENT, Tol));
end;

(*
CountItemsArea
~~~~~~~~~~~~~~

.. code-block:: pascal

  function CountItemsArea(area: Integer): Integer;

Counts items in a specified area. Does **not** count stacks.

.. note::

  by masquerader

Example:

.. code-block:: pascal

*)


function CountItemsArea(area: Integer): Integer;
begin
  Result := CountItemsIn(
      area, srl_ITEM_IDENT_COLOUR, srl_OUTLINE_BLACK,  [0, 1]
    );
end;

(*
ItemAmount
~~~~~~~~~~

.. code-block:: pascal

  function ItemAmount(
      Area, ItemType, Item_IDENT: Integer; Tol: TIntegerArray
    ): Integer;

Counts the number of items found with a color in a certain area. (Counts stacks)
Parameters:

- Area:
  See `srl_ITEMINT Consts`_
- ItemType:
  See `srl_ITEM_IDENT Consts`_
- Item_IDENT:
  name/value of your dtm/bmp/color/bmpmask.
- Tol:
  + *srl_ITEM_IDENT_DTM*: [][#]_.
  + *srl_ITEM_IDENT_BITMAP*: [BMPTol].
  + *srl_ITEM_IDENT_COLOUR*: [COLOUR Tol, Minimum Colour Count].
  + *srl_ITEM_IDENT_MASK*: [BMPTol, ContourTol].

.. note::

  by masquerader modified by ZephyrsFury.

Example:

.. code-block:: pascal

*)

function ItemAmount(
    area, ItemType, Item_IDENT: Integer; Tol: TIntegerArray
  ): Integer;
var
  Coords: TPointArray;
  i, h: Integer;
begin
  Result := 0;
  Coords := ItemCoordinates(Area, ItemType, Item_IDENT, Tol);
  h := High(Coords);
  for i := 0 to h do
    Result := Result + GetAmount(Coords[i].x, Coords[i].y);
end;

(*
FindCoins
~~~~~~~~~

.. code-block:: pascal

  function FindCoins(var X, Y: Integer; Area: Integer): Boolean;

Finds coins in Area and stores the coords in x and y.

.. note::

  by ZephyrsFury.

Example:

.. code-block:: pascal
  var
    cx, cy, numCoins: Integer;
  begin
    if (FindCoins(cx, cy, srl_ITEMINT_INVENTORY)) then
      numCoins := getAmount(cx, cy);
  end;

.. note::
  Modified: 13 Jan 2011 - Nava2

*)

function FindCoins(var X, Y: Integer; Area: Integer): Boolean;
var
  B: TBox;
  CTS, I, J, H, L: Integer;
  Pts, tPts: TPointArray;
  ATPA: T2DPointArray;
  V: array [0..1] of TVariantArray;
  hMod, sMod: Extended;
begin
  case Area of // ... FIX
    srl_ITEMINT_INVENTORY:
      B := IntToBox(MIX1, MIY1, MIX2, MIY2);
    srl_ITEMINT_BANK:
      B := IntToBox(MBx1, MBy1, MBx2, MBy2);
    srl_ITEMINT_TRADE:
      B := IntToBox(323, 73, 509, 302);
    srl_ITEMINT_TRADE_YOUR:
      B := IntToBox(9, 73, 196, 302);
    else
      srl_warn('FindCoins', 'Invalid Area passed.', warn_AllVersions);
  end;
  V[0] := [1606307, 4, 0.09, 1.32]; //Darker colour (top of coins)
  V[1] := [2209251, 8, 0.04, 1.08]; //Lighter colour (rest of the coins)
  CTS := GetToleranceSpeed;
  GetToleranceSpeed2Modifiers(hMod, sMod);
  SetColorToleranceSpeed(2);
  SetLength(tPts, 0);
  try
    for I := 0 to 1 do
    begin
      SetToleranceSpeed2Modifiers(V[I][2], V[I][3]);
      FindColorsTolerance(Pts, V[I][0], B.X1, B.Y1, B.X2, B.Y2, V[I][1]);
      if (Length(Pts) < 10) then Exit;
      ATPA := SplitTPAEx(Pts, 10, 10);
      h := High(ATPA);
      L := High(tPts) + 1;
      SetLength(tPts, L + h + 1);
      for J := 0 to H do
        tPts[L + j] := MiddleTPA(ATPA[J]);
    end;
    ATPA := SplitTPAEx(tPts, 20, 20);
    H := High(ATPA);
    for I := 0 to H do
      if (High(ATPA[I]) = 1) then
        Break;
    if (I > H) then Exit;
    Result := True;
    MiddleTPAEx(ATPA[I], X, Y);
  finally
    SetColorToleranceSpeed(CTS);
    SetToleranceSpeed2Modifiers(hMod, sMod);
  end;
end;

(*
CoinAmount
~~~~~~~~~~

.. code-block:: pascal

  function CoinAmount(Area: Integer): Integer;

Returns the amount of coins in a specified interface.

.. note::
  by ZephyrsFury.

Example:

.. code-block:: pascal
  var
    numCoins: Integer;
  begin
    numCoins := CoinAmount(srl_ITEMINT_TRADE);
  end;

.. note::
  Modified: unknown

*)

function CoinAmount(Area: Integer): Integer;
var
  cx, cy: Integer;
begin
  if (FindCoins(cx, cy, Area)) then
    Result := GetAmount(cx, cy);
end;

(*
ShopSwitchTab
~~~~~~~~~~~~~

.. code-block:: pascal

  procedure ShopSwitchTab(name:string);

Switches the shop tab to the one you want, only moves mouse if
  neccessary ShopSwitchTab('main') or ShopSwitchTab('player').

.. note::

  by Rasta Magician & ZephyrsFury

Example:

.. code-block:: pascal
  ShopSwitchTab('main');

*)

procedure ShopSwitchTab(Name: string);
begin
  if (not(InStrArr(Name, ['main', 'player'], False))) then
  begin
    srl_Warn('ShopSwitchTab', 'Name: ' + Name + ' is not a valid tab.', warn_AllVersions);
    Exit;
  end;
  if (ShopScreen) then
    FindTextTpa(1930687, 0, 50, 65, 225, 83, Capitalize(Name), SmallChars, ClickLeft);
end;
